//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "bytecode_types")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub bytecode_type: String,
    #[sea_orm(unique)]
    pub seq: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::failures::Entity")]
    Failures,
    #[sea_orm(has_many = "super::pending_tasks::Entity")]
    PendingTasks,
    #[sea_orm(has_many = "super::verified_contracts::Entity")]
    VerifiedContracts,
}

impl Related<super::failures::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Failures.def()
    }
}

impl Related<super::pending_tasks::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PendingTasks.def()
    }
}

impl Related<super::verified_contracts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VerifiedContracts.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
