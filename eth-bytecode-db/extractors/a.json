{
  "message": "OK",
  "result": [
    {
      "ABI": "[{\"inputs\":[],\"name\":\"actionDispatcher\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cardpayVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prepaidCardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_actionDispatcher\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prepaidCardManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_versionManager\",\"type\":\"address\"}],\"name\":\"setup\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"prepaidCard\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"rewardProgramID\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"blob\",\"type\":\"bytes\"}],\"name\":\"RewardRuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Setup\",\"type\":\"event\"}]",
      "AdditionalSources": [
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/base/GuardManager.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\n\ninterface Guard {\n    function checkTransaction(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures,\n        address msgSender\n    ) external;\n\n    function checkAfterExecution(bytes32 txHash, bool success) external;\n}\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract GuardManager is SelfAuthorized {\n    event ChangedGuard(address guard);\n    // keccak256(\"guard_manager.guard.address\")\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\n\n    /// @dev Set a guard that checks transactions before execution\n    /// @param guard The address of the guard to be used or the 0 address to disable the guard\n    function setGuard(address guard) external authorized {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, guard)\n        }\n        emit ChangedGuard(guard);\n    }\n\n    function getGuard() internal view returns (address guard) {\n        bytes32 slot = GUARD_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            guard := sload(slot)\n        }\n    }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/base/ModuleManager.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\nimport \"../common/SelfAuthorized.sol\";\nimport \"./Executor.sol\";\n\n/// @title Module Manager - A contract that manages modules that can execute transactions via this contract\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract ModuleManager is SelfAuthorized, Executor {\n    event EnabledModule(address module);\n    event DisabledModule(address module);\n    event ExecutionFromModuleSuccess(address indexed module);\n    event ExecutionFromModuleFailure(address indexed module);\n\n    address internal constant SENTINEL_MODULES = address(0x1);\n\n    mapping(address => address) internal modules;\n\n    function setupModules(address to, bytes memory data) internal {\n        require(modules[SENTINEL_MODULES] == address(0), \"GS100\");\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\n        if (to != address(0))\n            // Setup has to complete successfully or transaction fails.\n            require(execute(to, 0, data, Enum.Operation.DelegateCall, gasleft()), \"GS000\");\n    }\n\n    /// @dev Allows to add a module to the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Enables the module `module` for the Safe.\n    /// @param module Module to be whitelisted.\n    function enableModule(address module) public authorized {\n        // Module address cannot be null or sentinel.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        // Module cannot be added twice.\n        require(modules[module] == address(0), \"GS102\");\n        modules[module] = modules[SENTINEL_MODULES];\n        modules[SENTINEL_MODULES] = module;\n        emit EnabledModule(module);\n    }\n\n    /// @dev Allows to remove a module from the whitelist.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Disables the module `module` for the Safe.\n    /// @param prevModule Module that pointed to the module to be removed in the linked list\n    /// @param module Module to be removed.\n    function disableModule(address prevModule, address module) public authorized {\n        // Validate module address and check that it corresponds to module index.\n        require(module != address(0) && module != SENTINEL_MODULES, \"GS101\");\n        require(modules[prevModule] == module, \"GS103\");\n        modules[prevModule] = modules[module];\n        modules[module] = address(0);\n        emit DisabledModule(module);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations.\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModule(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public virtual returns (bool success) {\n        // Only whitelisted modules are allowed.\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\n        // Execute transaction without further confirmations.\n        success = execute(to, value, data, operation, gasleft());\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\n        else emit ExecutionFromModuleFailure(msg.sender);\n    }\n\n    /// @dev Allows a Module to execute a Safe transaction without any further confirmations and return data\n    /// @param to Destination address of module transaction.\n    /// @param value Ether value of module transaction.\n    /// @param data Data payload of module transaction.\n    /// @param operation Operation type of module transaction.\n    function execTransactionFromModuleReturnData(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation\n    ) public returns (bool success, bytes memory returnData) {\n        success = execTransactionFromModule(to, value, data, operation);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Load free memory location\n            let ptr := mload(0x40)\n            // We allocate memory for the return data by setting the free memory location to\n            // current free memory location + data size + 32 bytes for data size value\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\n            // Store the size\n            mstore(ptr, returndatasize())\n            // Store the data\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\n            // Point the return data to the correct memory location\n            returnData := ptr\n        }\n    }\n\n    /// @dev Returns if an module is enabled\n    /// @return True if the module is enabled\n    function isModuleEnabled(address module) public view returns (bool) {\n        return SENTINEL_MODULES != module && modules[module] != address(0);\n    }\n\n    /// @dev Returns array of modules.\n    /// @param start Start of the page.\n    /// @param pageSize Maximum number of modules that should be returned.\n    /// @return array Array of modules.\n    /// @return next Start of the next page.\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next) {\n        // Init array with max page size\n        array = new address[](pageSize);\n\n        // Populate return array\n        uint256 moduleCount = 0;\n        address currentModule = modules[start];\n        while (currentModule != address(0x0) && currentModule != SENTINEL_MODULES && moduleCount < pageSize) {\n            array[moduleCount] = currentModule;\n            currentModule = modules[currentModule];\n            moduleCount++;\n        }\n        next = currentModule;\n        // Set correct size of returned array\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            mstore(array, moduleCount)\n        }\n    }\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
        },
        {
          "Filename": "contracts/IPrepaidCardMarket.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\ninterface IPrepaidCardMarket {\n  // mapping\n  function asks(bytes32) external view returns (uint256);\n\n  // property\n  function paused() external view returns (bool);\n\n  function getQuantity(bytes32 sku) external view returns (uint256);\n\n  function setAsk(\n    address issuer,\n    bytes32 sku,\n    uint256 askPrice\n  ) external returns (bool);\n\n  function provisionPrepaidCard(address customer, bytes32 sku)\n    external\n    returns (bool);\n\n  function getSkuInfo(bytes32 sku)\n    external\n    view\n    returns (\n      address issuer,\n      address issuingToken,\n      uint256 faceValue,\n      string memory customizationDID\n    );\n\n  function getSKU(\n    address issuer,\n    address token,\n    uint256 faceValue,\n    string memory customizationDID\n  ) external view returns (bytes32);\n\n  function pause() external;\n\n  function unpause() external;\n}\n"
        },
        {
          "Filename": "contracts/Exchange.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"./core/Ownable.sol\";\n\nimport \"./token/IERC677.sol\";\nimport \"./oracles/IPriceOracle.sol\";\nimport \"./core/Versionable.sol\";\nimport \"./VersionManager.sol\";\n\ncontract Exchange is Ownable, Versionable {\n  event Setup();\n  event ExchangeCreated(string indexed tokenSymbol, address feed);\n\n  struct ExchangeInfo {\n    bool exists;\n    string tokenSymbol;\n    address feed;\n  }\n\n  mapping(bytes32 => ExchangeInfo) public exchanges;\n  uint256 public rateDriftPercentage; // decimals 8\n  address public versionManager;\n  string public cardTokenSymbol;\n\n  /**\n   * @dev set up revenue pool\n   * @param _rateDriftPercentage the numberator of a decimals 8 fraction that\n   * represents the percentage of how much a requested rate lock is allowed to\n   * drift from the actual rate\n   */\n  function setup(\n    uint256 _rateDriftPercentage,\n    address _versionManager,\n    string calldata _cardTokenSymbol\n  ) external onlyOwner {\n    require(_versionManager != address(0), \"versionManager not set\");\n    // For stable coins that use the USD snapping logic, 0% is suitable and\n    // for other non-stable coins, up to 1% is fine.\n    require(\n      _rateDriftPercentage <= 1000000,\n      \"rate drift percentage must be between 0 and 1%\"\n    );\n\n    rateDriftPercentage = _rateDriftPercentage;\n    versionManager = _versionManager;\n    cardTokenSymbol = _cardTokenSymbol;\n    emit Setup();\n  }\n\n  function createExchange(string calldata tokenSymbol, address feed)\n    external\n    onlyOwner\n  {\n    require(feed != address(0), \"invalid feed address\");\n    bytes32 key = keccak256(bytes(tokenSymbol));\n    exchanges[key].exists = true;\n    exchanges[key].tokenSymbol = tokenSymbol;\n    exchanges[key].feed = feed;\n    emit ExchangeCreated(tokenSymbol, feed);\n  }\n\n  function hasExchange(address token) public view returns (bool) {\n    bytes32 key = keccak256(bytes(IERC677(token).symbol()));\n    return exchanges[key].exists;\n  }\n\n  /**\n   * @dev query USD exchange rate of payable token\n   * @param token address of payableToken\n   * @return price exchange rate\n   * @return decimals\n   */\n  function exchangeRateOf(address token)\n    public\n    view\n    returns (uint256 price, uint8 decimals)\n  {\n    require(hasExchange(token), \"no exchange exists for token\");\n    ExchangeInfo memory exchange = exchanges[\n      keccak256(bytes(IERC677(token).symbol()))\n    ];\n    IPriceOracle oracle = IPriceOracle(exchange.feed);\n    decimals = oracle.decimals();\n    (price, ) = oracle.usdPrice();\n  }\n\n  /**\n   * @dev convert amount in token to amount in SPEND\n   * @param token address of token\n   * @param amount amount in token\n   * @return amount\n   */\n  function convertToSpend(address token, uint256 amount)\n    external\n    view\n    returns (uint256)\n  {\n    (uint256 usdRate, uint8 decimals) = exchangeRateOf(token);\n    require(\n      decimals == exchangeRateDecimals(),\n      \"unexpected decimals value for token price\"\n    );\n    return convertToSpendWithRate(token, amount, usdRate);\n  }\n\n  /**\n   * @dev convert amount in token to amount in SPEND using the provided rate.\n   * Note that the rate needs to use decimals 8.\n   * @param token address of token\n   * @param amount amount in token\n   * @param usdRate the usd token rate in decimal 8\n   * @return amount\n   */\n  function convertToSpendWithRate(\n    address token,\n    uint256 amount,\n    uint256 usdRate\n  ) public view returns (uint256) {\n    require(usdRate > 0, \"exchange rate cannot be 0\");\n    // SPEND is equivalent to USD cents, so we move the decimal point 2\n    // places to the right after obtaining the USD value of the token amount\n    uint8 spendDecimals = IERC677(token).decimals() +\n      exchangeRateDecimals() -\n      2;\n    require(spendDecimals <= 30, \"exponent overflow is likely\");\n    // a quirk about exponents is that the result will be calculated in the type\n    // of the base, so in order to prevent overflows you should use a base of\n    // uint256\n    uint256 ten = 10;\n    return (amount * usdRate) / (ten**spendDecimals);\n  }\n\n  /**\n   * @dev convert amount in SPEND to the amount in token\n   * @param token address of token\n   * @param amount amount in SPEND\n   * @return amount\n   */\n  function convertFromSpend(address token, uint256 amount)\n    external\n    view\n    returns (uint256)\n  {\n    (uint256 price, uint8 decimals) = exchangeRateOf(token);\n    require(\n      decimals == exchangeRateDecimals(),\n      \"unexpected decimals value for token price\"\n    );\n    return convertFromSpendWithRate(token, amount, price);\n  }\n\n  /**\n   * @dev convert amount in SPEND to the amount in token using the\n   * provided rate. Note that the rate needs to use decimals 8\n   * @param token address of token\n   * @param amount amount in SPEND\n   * @param usdRate the token rate in decimal 8\n   * @return amount\n   */\n  function convertFromSpendWithRate(\n    address token,\n    uint256 amount,\n    uint256 usdRate\n  ) public view returns (uint256) {\n    require(usdRate > 0, \"exchange rate cannot be 0\");\n    // SPEND is equivalent to USD cents, so we move the decimal point 2\n    // places to the right after obtaining the USD value of the token amount\n    uint8 spendDecimals = IERC677(token).decimals() +\n      exchangeRateDecimals() -\n      2;\n    require(spendDecimals <= 30, \"exponent overflow is likely\");\n    // a quirk about exponents is that the result will be calculated in the type\n    // of the base, so in order to prevent overflows you should use a base of\n    // uint256\n    uint256 ten = 10;\n    return (amount * (ten**spendDecimals)) / usdRate;\n  }\n\n  /**\n   * @dev convert amount from CARD.CPXD to the specified token\n   * @param token the address of the token you are converting to\n   * @param amount in CARD.CPXD that you are converting\n   */\n  function convertFromCARD(address token, uint256 amount)\n    external\n    view\n    returns (uint256)\n  {\n    require(bytes(cardTokenSymbol).length > 0, \"card token symbol not set\");\n    bytes32 cardKey = keccak256(bytes(cardTokenSymbol));\n    require(exchanges[cardKey].exists, \"no exchange exists for CARD.CPXD\");\n    require(hasExchange(token), \"no exchange exists for token\");\n\n    // convert through USD to specified token\n    IPriceOracle oracle = IPriceOracle(exchanges[cardKey].feed);\n    uint8 cardExchangeDecimals = oracle.decimals();\n    (uint256 cardUSDPrice, ) = oracle.usdPrice();\n    uint256 rawUsdValue = amount * cardUSDPrice;\n\n    (uint256 tokenUSDPrice, uint8 tokenExchangeDecimals) = exchangeRateOf(\n      token\n    );\n    uint256 ten = 10;\n    return\n      (rawUsdValue * (ten**tokenExchangeDecimals)) /\n      (tokenUSDPrice * (ten**cardExchangeDecimals));\n  }\n\n  /**\n   * @dev determine whether the requested rate falls within the acceptable safety\n   * margin\n   * @param token the issuing token address\n   * @param requestedRate the requested price of the issuing token in USD\n   */\n  function isAllowableRate(address token, uint256 requestedRate)\n    external\n    view\n    returns (bool)\n  {\n    (uint256 actualRate, ) = exchangeRateOf(token);\n    uint256 drift = actualRate > requestedRate\n      ? actualRate - requestedRate\n      : requestedRate - actualRate;\n    uint256 ten = 10;\n    uint256 observedDriftPercentage = (drift * (ten**exchangeRateDecimals())) /\n      actualRate;\n\n    // Only allow rate to drift if oracle is not snapped to USD\n    if (observedDriftPercentage > 0) {\n      bytes32 key = keccak256(bytes(IERC677(token).symbol()));\n      if (exchanges[key].exists) {\n        IPriceOracle oracle = IPriceOracle(exchanges[key].feed);\n        if (oracle.isSnappedToUSD()) {\n          return false;\n        }\n      }\n    }\n    return observedDriftPercentage <= rateDriftPercentage;\n  }\n\n  function exchangeRateDecimals() public pure returns (uint8) {\n    return 8;\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/Singleton.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Singleton - Base for singleton contracts (should always be first super contract)\n///         This contract is tightly coupled to our proxy contract (see `proxies/GnosisSafeProxy.sol`)\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract Singleton {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location as in the Proxy contract.\n    // It should also always be ensured that the address is stored alone (uses a full word)\n    address private singleton;\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"./GnosisSafeProxy.sol\";\n\ninterface IProxyCreationCallback {\n    function proxyCreated(\n        GnosisSafeProxy proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external;\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\n/// @author Richard Meissner - <richard@gnosis.io>\ninterface IProxy {\n    function masterCopy() external view returns (address);\n}\n\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafeProxy {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n    address internal singleton;\n\n    /// @dev Constructor function sets address of singleton contract.\n    /// @param _singleton Singleton address.\n    constructor(address _singleton) {\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        singleton = _singleton;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    fallback() external payable {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n                mstore(0, _singleton)\n                return(0, 0x20)\n            }\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
        },
        {
          "Filename": "contracts/core/ReentrancyGuard.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\ncontract ReentrancyGuard {\n  // So this can be used in safe delegate implementations, where the storage of this contract is the safe storage,\n  // we have to do assembly hax to store the reentrancy flag and can't just use\n  // ReentrancyGuardUpgradeable from OZ because it expects a storage slot for its state that\n  // will clobber safe storage\n\n  // bytes32(uint256(keccak256(\"safe.delegate.reentrancy_flag\")) - 1)\n  bytes32 internal constant REENTRANCY_GUARD_SLOT =\n    0x7712fbd67a2d5bda218f5373b681e9e155932a5fa44c9a20ed14fbb50f32636f;\n\n  modifier nonReentrant() {\n    bool _entered;\n\n    assembly {\n      _entered := sload(\n        REENTRANCY_GUARD_SLOT\n      )\n    }\n\n    require(!_entered, \"reentrant call\");\n\n      assembly {\n        sstore(REENTRANCY_GUARD_SLOT, true)\n      }\n    _;\n\n      assembly {\n        sstore(REENTRANCY_GUARD_SLOT, false)\n      }\n  }\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
        },
        {
          "Filename": "contracts/RewardSafeDelegateImplementation.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./RewardManager.sol\";\nimport \"./ActionDispatcher.sol\";\nimport \"./core/ReentrancyGuard.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\";\n\n// This contract is used as an implementation for delegatecall usage of safe operations.\n// It will never be called from it's own deployment address, whenever code here executes,\n// address(this) will be the gnosis safe, and if you call a function on another contract,\n// that other contract will see msg.sender as the safe address.\n\n// When you inspect msg.sender in one of the functions in this contract called with delegatecall,\n// it will be the relayer, not the safe address\n\n// Because the arguments to the functions called with delegate call are all user-provided, they\n// cannot be considered safe to trust. However, the reward manager contract validates the first\n// argument, which must be it's own address.\n\n// To avoid trusting user input, I have adopted a convention of prefixing arguments to the functions\n// in this contract with __trusted__ or __untrusted__ to indicated if further validation should\n// be performed before operating on the arguments\n\n// solhint-disable var-name-mixedcase\ncontract RewardSafeDelegateImplementation is ReentrancyGuard {\n  event RewardSafeWithdrawal(address rewardSafe, address token, uint256 value);\n  event RewardSafeTransferred(\n    address rewardSafe,\n    address oldOwner,\n    address newOwner\n  );\n\n  function withdraw(\n    address __trusted__managerContract,\n    address __untrusted__token,\n    address __untrusted__to,\n    uint256 __untrusted__value\n  ) external nonReentrant {\n    require(\n      RewardManager(__trusted__managerContract).isValidToken(\n        __untrusted__token\n      ),\n      \"must be valid token\"\n    );\n\n    SafeERC20Upgradeable.safeTransfer(\n      IERC20Upgradeable(__untrusted__token),\n      __untrusted__to,\n      __untrusted__value\n    );\n\n    emit RewardSafeWithdrawal(\n      address(this),\n      __untrusted__token,\n      __untrusted__value\n    );\n  }\n\n  function swapOwner(\n    address __trusted__managerContract,\n    address __untrusted__prevOwner,\n    address __untrusted__oldOwner,\n    address __untrusted__newOwner\n  ) external {\n    RewardManager(__trusted__managerContract).willTransferRewardSafe(\n      __untrusted__newOwner\n    );\n\n    _originalSafe().swapOwner(\n      __untrusted__prevOwner,\n      __untrusted__oldOwner,\n      __untrusted__newOwner\n    );\n\n    emit RewardSafeTransferred(\n      address(this),\n      __untrusted__oldOwner,\n      __untrusted__newOwner\n    );\n  }\n\n  // It needs this casting to allow the lookup of this contract as the orignal\n  // safe. But once you have it, you can call methods that are restricted to be\n  // only called by the safe, because msg.sender is the safe address!\n  function _originalSafe() private view returns (GnosisSafe) {\n    address payable safeAddress = payable(address(this));\n    return GnosisSafe(safeAddress);\n  }\n}\n// solhint-enable var-name-mixedcase\n"
        },
        {
          "Filename": "contracts/core/Ownable.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract Ownable is OwnableUpgradeable {\n  // This function cannot be called from inheriting contracts due to https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3006\n  // Instead, call OwnableInitialize directly from the overriden initilizaer\n  function initialize(address owner) external virtual initializer {\n    OwnableInitialize(owner);\n  }\n\n  // solhint-disable-next-line func-name-mixedcase\n  function OwnableInitialize(address owner) internal onlyInitializing {\n    __Ownable_init();\n    if (_msgSender() != owner) {\n      _transferOwnership(owner);\n    }\n  }\n\n  // add padding as storage layout changed in OZ contracts v4\n  // solhint-disable-next-line var-name-mixedcase\n  uint256[1] private ____gap_Ownable;\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/base/OwnerManager.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title OwnerManager - Manages a set of owners and a threshold to perform actions.\n/// @author Stefan George - <stefan@gnosis.pm>\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract OwnerManager is SelfAuthorized {\n    event AddedOwner(address owner);\n    event RemovedOwner(address owner);\n    event ChangedThreshold(uint256 threshold);\n\n    address internal constant SENTINEL_OWNERS = address(0x1);\n\n    mapping(address => address) internal owners;\n    uint256 internal ownerCount;\n    uint256 internal threshold;\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\n        // Threshold can only be 0 at initialization.\n        // Check ensures that setup function can only be called once.\n        require(threshold == 0, \"GS200\");\n        // Validate that threshold is smaller than number of added owners.\n        require(_threshold <= _owners.length, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        // Initializing Safe owners.\n        address currentOwner = SENTINEL_OWNERS;\n        for (uint256 i = 0; i < _owners.length; i++) {\n            // Owner address cannot be null.\n            address owner = _owners[i];\n            require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this) && currentOwner != owner, \"GS203\");\n            // No duplicate owners allowed.\n            require(owners[owner] == address(0), \"GS204\");\n            owners[currentOwner] = owner;\n            currentOwner = owner;\n        }\n        owners[currentOwner] = SENTINEL_OWNERS;\n        ownerCount = _owners.length;\n        threshold = _threshold;\n    }\n\n    /// @dev Allows to add a new owner to the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\n    /// @param owner New owner address.\n    /// @param _threshold New threshold.\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(owner != address(0) && owner != SENTINEL_OWNERS && owner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[owner] == address(0), \"GS204\");\n        owners[owner] = owners[SENTINEL_OWNERS];\n        owners[SENTINEL_OWNERS] = owner;\n        ownerCount++;\n        emit AddedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to remove an owner from the Safe and update the threshold at the same time.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\n    /// @param prevOwner Owner that pointed to the owner to be removed in the linked list\n    /// @param owner Owner address to be removed.\n    /// @param _threshold New threshold.\n    function removeOwner(\n        address prevOwner,\n        address owner,\n        uint256 _threshold\n    ) public authorized {\n        // Only allow to remove an owner, if threshold can still be reached.\n        require(ownerCount - 1 >= _threshold, \"GS201\");\n        // Validate owner address and check that it corresponds to owner index.\n        require(owner != address(0) && owner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == owner, \"GS205\");\n        owners[prevOwner] = owners[owner];\n        owners[owner] = address(0);\n        ownerCount--;\n        emit RemovedOwner(owner);\n        // Change threshold if threshold was changed.\n        if (threshold != _threshold) changeThreshold(_threshold);\n    }\n\n    /// @dev Allows to swap/replace an owner from the Safe with another address.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\n    /// @param prevOwner Owner that pointed to the owner to be replaced in the linked list\n    /// @param oldOwner Owner address to be replaced.\n    /// @param newOwner New owner address.\n    function swapOwner(\n        address prevOwner,\n        address oldOwner,\n        address newOwner\n    ) public authorized {\n        // Owner address cannot be null, the sentinel or the Safe itself.\n        require(newOwner != address(0) && newOwner != SENTINEL_OWNERS && newOwner != address(this), \"GS203\");\n        // No duplicate owners allowed.\n        require(owners[newOwner] == address(0), \"GS204\");\n        // Validate oldOwner address and check that it corresponds to owner index.\n        require(oldOwner != address(0) && oldOwner != SENTINEL_OWNERS, \"GS203\");\n        require(owners[prevOwner] == oldOwner, \"GS205\");\n        owners[newOwner] = owners[oldOwner];\n        owners[prevOwner] = newOwner;\n        owners[oldOwner] = address(0);\n        emit RemovedOwner(oldOwner);\n        emit AddedOwner(newOwner);\n    }\n\n    /// @dev Allows to update the number of required confirmations by Safe owners.\n    ///      This can only be done via a Safe transaction.\n    /// @notice Changes the threshold of the Safe to `_threshold`.\n    /// @param _threshold New threshold.\n    function changeThreshold(uint256 _threshold) public authorized {\n        // Validate that threshold is smaller than number of owners.\n        require(_threshold <= ownerCount, \"GS201\");\n        // There has to be at least one Safe owner.\n        require(_threshold >= 1, \"GS202\");\n        threshold = _threshold;\n        emit ChangedThreshold(threshold);\n    }\n\n    function getThreshold() public view returns (uint256) {\n        return threshold;\n    }\n\n    function isOwner(address owner) public view returns (bool) {\n        return owner != SENTINEL_OWNERS && owners[owner] != address(0);\n    }\n\n    /// @dev Returns array of owners.\n    /// @return Array of Safe owners.\n    function getOwners() public view returns (address[] memory) {\n        address[] memory array = new address[](ownerCount);\n\n        // populate return array\n        uint256 index = 0;\n        address currentOwner = owners[SENTINEL_OWNERS];\n        while (currentOwner != SENTINEL_OWNERS) {\n            array[index] = currentOwner;\n            currentOwner = owners[currentOwner];\n            index++;\n        }\n        return array;\n    }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/SelfAuthorized.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SelfAuthorized - authorizes current contract to perform actions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SelfAuthorized {\n    function requireSelfCall() private view {\n        require(msg.sender == address(this), \"GS031\");\n    }\n\n    modifier authorized() {\n        // This is a function call as it minimized the bytecode size\n        requireSelfCall();\n        _;\n    }\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
        },
        {
          "Filename": "contracts/RewardManager.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"./core/Ownable.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\nimport \"@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"./core/Safe.sol\";\nimport \"./core/Versionable.sol\";\nimport \"./ActionDispatcher.sol\";\nimport \"./RewardSafeDelegateImplementation.sol\";\nimport \"./VersionManager.sol\";\n\ncontract RewardManager is Ownable, Versionable, Safe {\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n  event Setup();\n  event RewardProgramCreated(address rewardProgramID, address admin);\n  event RewardProgramRemoved(address rewardProgramID);\n  event RewardProgramAdminUpdated(address rewardProgramID, address newAdmin);\n  event RewardProgramLocked(address rewardProgramID);\n  event RewardRuleAdded(address rewardProgramID, bytes blob);\n  event RewardeeRegistered(\n    address rewardProgramID,\n    address rewardee,\n    address rewardSafe\n  );\n\n  // keccak256 hash of the “isValidSignature(bytes,bytes)“, with the first argument deviating from the specification’s bytes32, due\n  // to needing compatibility with gnosis safe which also deviates from the spec in this way\n  bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n  uint256 internal _nonce;\n\n  address public actionDispatcher;\n  uint256 public rewardProgramRegistrationFeeInSPEND;\n  address payable public rewardFeeReceiver; // will receive receive all fees\n  address public governanceAdmin; // eoa with governance powers\n\n  EnumerableSetUpgradeable.AddressSet internal rewardProgramIDs;\n  EnumerableSetUpgradeable.AddressSet internal eip1271Contracts;\n  mapping(address => EnumerableSetUpgradeable.AddressSet) internal rewardSafes; //reward program id <> reward safes\n  mapping(address => bytes) public rule; //reward program id <> bytes\n  mapping(address => address) public rewardProgramAdmins; //reward program id <> reward program admins\n  mapping(address => bool) public rewardProgramLocked; //reward program id <> locked\n  mapping(address => mapping(address => address)) public ownedRewardSafes; // EOA <> reward program id <> reward safe address\n  mapping(address => address) public rewardProgramsForRewardSafes; // reward safe <> reward program id\n\n  address public safeDelegateImplementation;\n\n  address public versionManager;\n\n  modifier onlyHandlers() {\n    require(\n      ActionDispatcher(actionDispatcher).isHandler(msg.sender),\n      \"caller is not a registered action handler\"\n    );\n    _;\n  }\n\n  modifier onlyGovernanceAdmin() {\n    require(msg.sender == governanceAdmin, \"caller is not governance admin\");\n    _;\n  }\n\n  function initialize(address owner) public override initializer {\n    _nonce = 0;\n    OwnableInitialize(owner);\n  }\n\n  function setup(\n    address _actionDispatcher,\n    address _gsMasterCopy,\n    address _gsProxyFactory,\n    address payable _rewardFeeReceiver,\n    uint256 _rewardProgramRegistrationFeeInSPEND,\n    address[] calldata _eip1271Contracts,\n    address _governanceAdmin,\n    address _safeDelegateImplementation,\n    address _versionManager\n  ) external onlyOwner {\n    require(_actionDispatcher != address(0), \"actionDispatcher not set\");\n    require(_gsMasterCopy != address(0), \"gsMasterCopy not set\");\n    require(_gsProxyFactory != address(0), \"gsProxyFactory not set\");\n    require(_rewardFeeReceiver != address(0), \"rewardFeeReceiver not set\");\n    require(_governanceAdmin != address(0), \"governanceAdmin not set\");\n    require(\n      _safeDelegateImplementation != address(0),\n      \"safeDelegateImplementation not set\"\n    );\n    require(_versionManager != address(0), \"versionManager not set\");\n    require(\n      _rewardProgramRegistrationFeeInSPEND > 0,\n      \"rewardProgramRegistrationFeeInSPEND is not set\"\n    );\n    require(\n      _rewardProgramRegistrationFeeInSPEND <= 100000,\n      \"rewardProgramRegistrationFeeInSPEND is above the maximum\"\n    );\n    actionDispatcher = _actionDispatcher;\n    Safe.setup(_gsMasterCopy, _gsProxyFactory);\n    rewardFeeReceiver = _rewardFeeReceiver;\n    rewardProgramRegistrationFeeInSPEND = _rewardProgramRegistrationFeeInSPEND;\n    versionManager = _versionManager;\n    governanceAdmin = _governanceAdmin;\n    for (uint256 i = 0; i < _eip1271Contracts.length; i++) {\n      require(\n        _eip1271Contracts[i] != address(0),\n        \"eip1271Contracts has zero address\"\n      );\n      eip1271Contracts.add(_eip1271Contracts[i]);\n    }\n    safeDelegateImplementation = _safeDelegateImplementation;\n    emit Setup();\n  }\n\n  function getEip1271Contracts() external view returns (address[] memory) {\n    return eip1271Contracts.values();\n  }\n\n  function registerRewardProgram(address admin, address rewardProgramID)\n    external\n    onlyHandlers\n  {\n    require(\n      !isRewardProgram(rewardProgramID),\n      \"reward program already registered\"\n    );\n    rewardProgramIDs.add(rewardProgramID);\n    rewardProgramAdmins[rewardProgramID] = admin;\n    emit RewardProgramCreated(rewardProgramID, admin);\n  }\n\n  function removeRewardProgram(address rewardProgramID)\n    external\n    onlyGovernanceAdmin\n  {\n    require(rewardProgramID != address(0), \"invalid rewardProgramID\");\n    rewardProgramIDs.remove(rewardProgramID);\n    delete rewardProgramAdmins[rewardProgramID];\n    delete rewardProgramLocked[rewardProgramID]; // equivalent to false\n    delete rule[rewardProgramID]; // equivalent to false\n    emit RewardProgramRemoved(rewardProgramID);\n  }\n\n  function updateAdmin(address rewardProgramID, address newAdmin)\n    external\n    onlyHandlers\n  {\n    require(\n      rewardProgramIDs.contains(rewardProgramID),\n      \"invalid rewardProgramID\"\n    );\n    require(newAdmin != address(0), \"invalid newAdmin\");\n    rewardProgramAdmins[rewardProgramID] = newAdmin;\n    emit RewardProgramAdminUpdated(rewardProgramID, newAdmin);\n  }\n\n  function addRewardRule(address rewardProgramID, bytes calldata blob)\n    external\n    onlyHandlers\n  {\n    require(\n      rewardProgramIDs.contains(rewardProgramID),\n      \"invalid rewardProgramID\"\n    );\n    rule[rewardProgramID] = blob;\n    emit RewardRuleAdded(rewardProgramID, blob);\n  }\n\n  function lockRewardProgram(address rewardProgramID) external onlyHandlers {\n    require(\n      rewardProgramIDs.contains(rewardProgramID),\n      \"invalid rewardProgramID\"\n    );\n\n    rewardProgramLocked[rewardProgramID] = !rewardProgramLocked[\n      rewardProgramID\n    ];\n    emit RewardProgramLocked(rewardProgramID);\n  }\n\n  function registerRewardee(address rewardProgramID, address prepaidCardOwner)\n    external\n    onlyHandlers\n    returns (address)\n  {\n    require(\n      rewardProgramIDs.contains(rewardProgramID),\n      \"invalid rewardProgramID\"\n    );\n    require(prepaidCardOwner != address(0), \"invalid prepaidCardOwner\");\n\n    address[] memory owners = new address[](2);\n    owners[0] = address(this);\n    owners[1] = prepaidCardOwner;\n\n    address existingSafe = ownedRewardSafes[prepaidCardOwner][rewardProgramID];\n    require(existingSafe == address(0), \"rewardee already registered\");\n    address rewardSafe = createSafe(owners, 2);\n    rewardSafes[rewardProgramID].add(rewardSafe);\n    ownedRewardSafes[prepaidCardOwner][rewardProgramID] = rewardSafe;\n    rewardProgramsForRewardSafes[rewardSafe] = rewardProgramID;\n    emit RewardeeRegistered(rewardProgramID, prepaidCardOwner, rewardSafe);\n    return rewardSafe;\n  }\n\n  function willTransferRewardSafe(address newOwner) external {\n    address oldOwner = getRewardSafeOwner(payable(msg.sender));\n    address rewardProgramID = rewardProgramsForRewardSafes[msg.sender];\n    require(\n      ownedRewardSafes[newOwner][rewardProgramID] == address(0),\n      \"Cannot transfer to owner which already has reward safe\"\n    );\n    require(\n      ownedRewardSafes[oldOwner][rewardProgramID] == msg.sender,\n      \"Only current owner can transfer\"\n    );\n    ownedRewardSafes[oldOwner][rewardProgramID] = address(0);\n    ownedRewardSafes[newOwner][rewardProgramID] = msg.sender;\n  }\n\n  function getRewardSafeOwner(address payable rewardSafe)\n    public\n    view\n    returns (address)\n  {\n    address[] memory owners = GnosisSafe(rewardSafe).getOwners();\n    require(owners.length == 2, \"unexpected number of owners for reward safe\");\n    return owners[0] == address(this) ? owners[1] : owners[0];\n  }\n\n  function isRewardProgram(address rewardProgramID) public view returns (bool) {\n    return rewardProgramIDs.contains(rewardProgramID);\n  }\n\n  function isValidRewardSafe(\n    address payable rewardSafe,\n    address rewardProgramID\n  ) external view returns (bool) {\n    return rewardSafes[rewardProgramID].contains(rewardSafe);\n  }\n\n  function encodeTransactionData(bytes memory signature)\n    public\n    view\n    returns (\n      address,\n      bytes memory,\n      Enum.Operation,\n      bytes memory\n    )\n  {\n    (\n      address to,\n      uint256 value,\n      bytes memory payload,\n      uint8 operation,\n      uint256 safeTxGas,\n      uint256 baseGas,\n      uint256 gasPrice,\n      address gasToken,\n      address refundReceiver,\n      uint256 nonce\n    ) = abi.decode(\n        signature,\n        (\n          address,\n          uint256,\n          bytes,\n          uint8,\n          uint256,\n          uint256,\n          uint256,\n          address,\n          address,\n          uint256\n        )\n      );\n    return (\n      to,\n      GnosisSafe(payable(msg.sender)).encodeTransactionData(\n        to,\n        value,\n        payload,\n        Enum.Operation(operation),\n        safeTxGas,\n        baseGas,\n        gasPrice,\n        gasToken,\n        refundReceiver,\n        nonce\n      ),\n      Enum.Operation(operation),\n      payload\n    );\n  }\n\n  // isValidSignature uses a guard-pattern to restrict gnosis transactions from reward safe\n  // - prevent a safe eoa owner to interact directly with gnosis safe directly without going through the reward manager contract, e.g. executing SWAP_OWNER\n  // - any gnosis execution of this safe will hit this callback\n  // - facilitate the use of nested gnosis execution, we do it st any gnosis function calls (.e.g SWAP_OWNER) can only be executed on the reward manager contract itself\n  // - reward safe has two owners, the eoa and the reward manager contract\n  //\n  // See inline comments for signature validity logic\n  //\n  function isValidSignature(bytes memory data, bytes memory signature)\n    external\n    view\n    returns (bytes4)\n  {\n    (\n      address to,\n      bytes memory encodedTransactionData,\n      Enum.Operation operation,\n      bytes memory payload\n    ) = encodeTransactionData(signature);\n\n    // _equalBytes checks that the data verifying part of the eip1271 signature to make sure that the user is not trying to exploit this callback, for example, if they pass in a different nonce or different payload\n    require(\n      _equalBytes(data, encodedTransactionData),\n      \"Signature data mismatch\"\n    );\n\n    if (operation == Enum.Operation.DelegateCall) {\n      // Allow DelegateCall operations to the designated delegate implementation contract\n      require(to == safeDelegateImplementation, \"Invalid delegate contract\");\n\n      address manager = _extractFirstPayloadArgument(payload);\n\n      // By convention, the first payload argument for any function we execute as a delegateCall must be\n      // the verifying contract that has the isValidSignature function. The other params are validated\n      // by the code in the RewardSafeDelegateImplementation as necessary, but by validating this address,\n      // we provide a trusted contract that can be queried for known state\n      require(manager == address(this), \"invalid manager\");\n\n      return EIP1271_MAGIC_VALUE;\n    } else if (eip1271Contracts.contains(to)) {\n      // Allow gnosis exec of reward safe to call any function on federated contracts\n      // essentially, we can lock all reward safe transactions by unfederating a contract\n      return EIP1271_MAGIC_VALUE;\n    }\n\n    return bytes4(0);\n  }\n\n  function isValidToken(address tokenAddress) external view returns (bool) {\n    return\n      TokenManager(ActionDispatcher(actionDispatcher).tokenManager())\n        .isValidToken(tokenAddress);\n  }\n\n  function _extractFirstPayloadArgument(bytes memory payload)\n    private\n    pure\n    returns (address)\n  {\n    // the payload starts with the method selector, and so needs an offset\n    // before decoding the params\n    uint256 begin = 5;\n    uint256 end = begin + 31;\n\n    bytes memory a = new bytes(32);\n    for (uint256 i = 0; i <= end - begin; i++) {\n      a[i] = payload[i + begin - 1];\n    }\n\n    return abi.decode(a, (address));\n  }\n\n  function _equalBytes(bytes memory bytesArr1, bytes memory bytesArr2)\n    internal\n    pure\n    returns (bool)\n  {\n    return\n      keccak256(abi.encodePacked(bytesArr1)) ==\n      keccak256(abi.encodePacked(bytesArr2));\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/Enum.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title Enum - Collection of enums\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Enum {\n    enum Operation {Call, DelegateCall}\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n *  Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable.\n *  See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n *  In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSetUpgradeable {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
        },
        {
          "Filename": "contracts/libraries/SafeERC677.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\nimport \"../token/IERC677.sol\";\n\nlibrary SafeERC677 {\n  function safeTransferAndCall(\n    IERC677 token,\n    address to,\n    uint256 value,\n    bytes memory data\n  ) internal {\n    bool result = token.transferAndCall(to, value, data);\n    require(result, \"safeTransferAndCall failed\");\n  }\n}\n"
        },
        {
          "Filename": "contracts/TokenManager.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"./core/Ownable.sol\";\nimport \"./core/Versionable.sol\";\nimport \"./VersionManager.sol\";\n\ncontract TokenManager is Ownable, Versionable {\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n  EnumerableSetUpgradeable.AddressSet internal payableTokens;\n  address public bridgeUtils;\n  address public versionManager;\n\n  event PayableTokenAdded(address indexed token);\n  event PayableTokenRemoved(address indexed token);\n  event BridgeUtilsSet(address indexed bridgeUtils);\n\n  modifier onlyBridgeUtilsOrOwner() {\n    require(\n      isBridgeUtils() || (owner() == _msgSender()),\n      \"caller is not BridgeUtils\"\n    );\n    _;\n  }\n\n  function setup(\n    address _bridgeUtils,\n    address[] calldata _payableTokens,\n    address _versionManager\n  ) external onlyOwner {\n    bridgeUtils = _bridgeUtils;\n    versionManager = _versionManager;\n    emit BridgeUtilsSet(bridgeUtils);\n    for (uint256 i = 0; i < _payableTokens.length; i++) {\n      _addPayableToken(_payableTokens[i]);\n    }\n  }\n\n  function addPayableToken(address _token)\n    external\n    onlyBridgeUtilsOrOwner\n    returns (bool)\n  {\n    return _addPayableToken(_token);\n  }\n\n  function removePayableToken(address _token)\n    external\n    onlyOwner\n    returns (bool)\n  {\n    return _removePayableToken(_token);\n  }\n\n  function getTokens() external view returns (address[] memory) {\n    return payableTokens.values();\n  }\n\n  function isBridgeUtils() public view returns (bool) {\n    return _msgSender() == bridgeUtils;\n  }\n\n  function isValidToken(address token) external view returns (bool) {\n    return payableTokens.contains(token);\n  }\n\n  function _addPayableToken(address _token) internal returns (bool) {\n    require(_token != address(0), \"invalid token\");\n\n    payableTokens.add(_token);\n    emit PayableTokenAdded(_token);\n    return true;\n  }\n\n  function _removePayableToken(address _token) internal returns (bool) {\n    require(payableTokens.contains(_token), \"invalid token\");\n    payableTokens.remove(_token);\n    emit PayableTokenRemoved(_token);\n    return true;\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/base/FallbackManager.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"../common/SelfAuthorized.sol\";\n\n/// @title Fallback Manager - A contract that manages fallback calls made to this contract\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract FallbackManager is SelfAuthorized {\n    event ChangedFallbackHandler(address handler);\n\n    // keccak256(\"fallback_manager.handler.address\")\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\n\n    function internalSetFallbackHandler(address handler) internal {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            sstore(slot, handler)\n        }\n    }\n\n    /// @dev Allows to add a contract to handle fallback calls.\n    ///      Only fallback calls without value and with data will be forwarded.\n    ///      This can only be done via a Safe transaction.\n    /// @param handler contract to handle fallbacks calls.\n    function setFallbackHandler(address handler) public authorized {\n        internalSetFallbackHandler(handler);\n        emit ChangedFallbackHandler(handler);\n    }\n\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\n    fallback() external {\n        bytes32 slot = FALLBACK_HANDLER_STORAGE_SLOT;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let handler := sload(slot)\n            if iszero(handler) {\n                return(0, 0)\n            }\n            calldatacopy(0, 0, calldatasize())\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\n            // Then the address without padding is stored right after the calldata\n            mstore(calldatasize(), shl(96, caller()))\n            // Add 20 bytes for the address appended add the end\n            let success := call(gas(), handler, 0, 0, add(calldatasize(), 20), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if iszero(success) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/SecuredTokenTransfer.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SecuredTokenTransfer - Secure token transfer\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SecuredTokenTransfer {\n    /// @dev Transfers a token and returns if it was a success\n    /// @param token Token that should be transferred\n    /// @param receiver Receiver to whom the token should be transferred\n    /// @param amount The amount of tokens that should be transferred\n    function transferToken(\n        address token,\n        address receiver,\n        uint256 amount\n    ) internal returns (bool transferred) {\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // We write the return value to scratch space.\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            switch returndatasize()\n                case 0 {\n                    transferred := success\n                }\n                case 0x20 {\n                    transferred := iszero(or(iszero(success), iszero(mload(0))))\n                }\n                default {\n                    transferred := 0\n                }\n        }\n    }\n}\n"
        },
        {
          "Filename": "contracts/token/IERC677.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface IERC677 is IERC20Upgradeable {\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes memory data\n  ) external returns (bool ok);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value,\n    bytes data\n  );\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/StorageAccessible.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title StorageAccessible - generic base contract that allows callers to access all internal storage.\n/// @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\ncontract StorageAccessible {\n    /**\n     * @dev Reads `length` bytes of storage in the currents contract\n     * @param offset - the offset in the current contract's storage in words to start reading from\n     * @param length - the number of words (32 bytes) of data to read\n     * @return the bytes that were read.\n     */\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\n        bytes memory result = new bytes(length * 32);\n        for (uint256 index = 0; index < length; index++) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                let word := sload(add(offset, index))\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Performs a delegetecall on a targetContract in the context of self.\n     * Internally reverts execution to avoid side effects (making it static).\n     *\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\n     * Specifically, the `returndata` after a call to this method will be:\n     * `success:bool || response.length:uint256 || response:bytes`.\n     *\n     * @param targetContract Address of the contract containing the code to execute.\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\n     */\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\n\n            mstore(0x00, success)\n            mstore(0x20, returndatasize())\n            returndatacopy(0x40, 0, returndatasize())\n            revert(0, add(returndatasize(), 0x40))\n        }\n    }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./GnosisSafeProxy.sol\";\nimport \"./IProxyCreationCallback.sol\";\n\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract GnosisSafeProxyFactory {\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param singleton Address of singleton contract.\n    /// @param data Payload for message call sent to new proxy contract.\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\n        proxy = new GnosisSafeProxy(singleton);\n        if (data.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, singleton);\n    }\n\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n    function proxyRuntimeCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).runtimeCode;\n    }\n\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n    function proxyCreationCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).creationCode;\n    }\n\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\n    ///      This method is only meant as an utility to be called from other methods\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function deployProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) internal returns (GnosisSafeProxy proxy) {\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n        }\n        require(address(proxy) != address(0), \"Create2 call failed\");\n    }\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) public returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        if (initializer.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, _singleton);\n    }\n\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\n    function createProxyWithCallback(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce,\n        IProxyCreationCallback callback\n    ) public returns (GnosisSafeProxy proxy) {\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\n    }\n\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function calculateCreateProxyWithNonceAddress(\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        revert(string(abi.encodePacked(proxy)));\n    }\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/draft-IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
        },
        {
          "Filename": "contracts/core/Safe.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxyFactory.sol\";\n\ncontract Safe {\n  bytes4 internal constant SETUP = 0xb63e800d;\n  address internal constant ZERO_ADDRESS = address(0);\n\n  address public gnosisSafe;\n  address public gnosisProxyFactory;\n\n  function setup(address _gnosisSafe, address _gnosisProxyFactory) internal {\n    gnosisProxyFactory = _gnosisProxyFactory;\n    gnosisSafe = _gnosisSafe;\n  }\n\n  function createSafe(address[] memory safeOwners, uint256 threshold)\n    internal\n    returns (address)\n  {\n    bytes memory data = abi.encodeWithSelector(\n      SETUP,\n      safeOwners,\n      threshold,\n      ZERO_ADDRESS,\n      \"\",\n      ZERO_ADDRESS,\n      ZERO_ADDRESS,\n      0,\n      ZERO_ADDRESS\n    );\n\n    address safe = address(\n      GnosisSafeProxyFactory(gnosisProxyFactory).createProxy(gnosisSafe, data)\n    );\n\n    require(safe != ZERO_ADDRESS, \"Create a Safe failed\");\n\n    return safe;\n  }\n\n  function createSafe(address owner) internal returns (address) {\n    address[] memory ownerArr = new address[](1);\n    ownerArr[0] = owner;\n\n    return createSafe(ownerArr, 1);\n  }\n\n  uint256[50] private ____gap;\n}\n"
        },
        {
          "Filename": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
          "SourceCode": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/interfaces/ISignatureValidator.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ISignatureValidatorConstants {\n    // bytes4(keccak256(\"isValidSignature(bytes,bytes)\")\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n}\n\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param _data Arbitrary length data signed on the behalf of address(this)\n     * @param _signature Signature byte array associated with _data\n     *\n     * MUST return the bytes4 magic value 0x20c13b0b when function passes.\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\n     * MUST allow external calls\n     */\n    function isValidSignature(bytes memory _data, bytes memory _signature) public view virtual returns (bytes4);\n}\n"
        },
        {
          "Filename": "contracts/core/Versionable.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\n// This contract no longer does anything, but we can't remove it because our\n// upgradeable contracts' storage layout would break. If we ever rev the\n// protocol in such a way that we can clear our contract state, then we should\n// get rid of this contract. For any future contracts, please do not add this to\n// your contract inheritance chain.\ncontract Versionable {\n  uint256[50] private ____gap;\n}\n"
        },
        {
          "Filename": "contracts/ActionDispatcher.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"./core/Ownable.sol\";\nimport \"./token/IERC677.sol\";\nimport \"./TokenManager.sol\";\nimport \"./Exchange.sol\";\nimport \"./core/Versionable.sol\";\nimport \"./PrepaidCardManager.sol\";\nimport \"./VersionManager.sol\";\nimport \"./libraries/SafeERC677.sol\";\n\ncontract ActionDispatcher is Ownable, Versionable {\n  using SafeERC677 for IERC677;\n\n  struct Action {\n    string name;\n    address payable prepaidCard;\n    address issuingToken;\n    uint256 tokenAmount;\n    uint256 spendAmount;\n    uint256 requestedRate;\n    bytes32 nameHash;\n    bytes data;\n  }\n\n  address public exchangeAddress;\n  address payable public prepaidCardManager;\n  address public tokenManager;\n  mapping(string => address) public actions;\n  mapping(address => bool) public isHandler;\n  address public versionManager;\n\n  event Setup();\n  event HandlerAdded(address handler, string action);\n  event HandlerRemoved(address handler, string action);\n\n  /**\n   * @param _exchangeAddress the address of the Exchange contract\n   * @param _prepaidCardManager the address of the PrepaidCardManager contract\n   */\n  function setup(\n    address _tokenManager,\n    address _exchangeAddress,\n    address payable _prepaidCardManager,\n    address _versionManager\n  ) external onlyOwner {\n    require(_tokenManager != address(0), \"tokenManager not set\");\n    require(_exchangeAddress != address(0), \"exchangeAddress not set\");\n    require(_prepaidCardManager != address(0), \"prepaidCardManager not set\");\n    require(_versionManager != address(0), \"versionManager not set\");\n    tokenManager = _tokenManager;\n    exchangeAddress = _exchangeAddress;\n    prepaidCardManager = _prepaidCardManager;\n    versionManager = _versionManager;\n    emit Setup();\n  }\n\n  /**\n   * @dev add action handler to revenue pool\n   *\n   */\n  function addHandler(address handler, string calldata action)\n    external\n    onlyOwner\n    returns (bool)\n  {\n    actions[action] = handler;\n    isHandler[handler] = true;\n    emit HandlerAdded(handler, action);\n    return true;\n  }\n\n  function removeHandler(string calldata action)\n    external\n    onlyOwner\n    returns (bool)\n  {\n    address handler = actions[action];\n    if (handler != address(0)) {\n      delete actions[action];\n      delete isHandler[handler];\n      emit HandlerRemoved(handler, action);\n    }\n    return true;\n  }\n\n  /**\n   * @dev onTokenTransfer(ERC677) - this is the ERC677 token transfer callback.\n   *\n   * Performs the requested action from the prepaid card using the token amount sent\n   * by forwarding it to another contract.\n   *\n   * See ActionDispatcher in README for more information.\n   *\n   * @param from - who transfers tokens (should be from a prepaid card)\n   * @param amount - number of tokens (can be 0 when no tokens are required for the action)\n   * @param data - encoded as (\n   *   uint256 spendAmount\n   *   uint256 requestedRate\n   *   string actionName\n   *   bytes actionData\n   * )\n   */\n  function onTokenTransfer(\n    address payable from,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool) {\n    require(\n      TokenManager(tokenManager).isValidToken(msg.sender),\n      \"calling token is unaccepted\"\n    );\n\n    // The Revenue pool can only receive funds from prepaid cards\n    PrepaidCardManager prepaidCardMgr = PrepaidCardManager(prepaidCardManager);\n    (address issuer, , , , , ) = prepaidCardMgr.cardDetails(from);\n    require(issuer != address(0), \"Caller is not a prepaid card\");\n\n    (\n      uint256 spendAmount,\n      uint256 requestedRate,\n      string memory actionName,\n      bytes memory actionData\n    ) = abi.decode(data, (uint256, uint256, string, bytes));\n    Action memory action = makeAction(\n      actionName,\n      from,\n      msg.sender,\n      amount,\n      spendAmount,\n      requestedRate,\n      actionData\n    );\n\n    return dispatchAction(action);\n  }\n\n  function makeAction(\n    string memory actionName,\n    address payable prepaidCard,\n    address issuingToken,\n    uint256 tokenAmount,\n    uint256 spendAmount,\n    uint256 requestedRate,\n    bytes memory actionData\n  ) internal pure returns (Action memory) {\n    bytes32 nameHash = keccak256(abi.encodePacked(actionName));\n    return\n      Action(\n        actionName,\n        prepaidCard,\n        issuingToken,\n        tokenAmount,\n        spendAmount,\n        requestedRate,\n        nameHash,\n        actionData\n      );\n  }\n\n  function dispatchAction(Action memory action) internal returns (bool) {\n    validatePayment(\n      action.issuingToken,\n      action.tokenAmount,\n      action.spendAmount,\n      action.requestedRate\n    );\n\n    address handler = actions[action.name];\n    require(address(handler) != address(0), \"no handler for action\");\n\n    IERC677(action.issuingToken).safeTransferAndCall(\n      handler,\n      action.tokenAmount,\n      abi.encode(action.prepaidCard, action.spendAmount, action.data)\n    );\n    return true;\n  }\n\n  function validatePayment(\n    address token,\n    uint256 tokenAmount,\n    uint256 spendAmount,\n    uint256 requestedRate\n  ) internal view returns (bool) {\n    Exchange exchange = Exchange(exchangeAddress);\n    uint256 expectedTokenAmount = exchange.convertFromSpendWithRate(\n      token,\n      spendAmount,\n      requestedRate\n    );\n    require(\n      expectedTokenAmount == tokenAmount,\n      \"amount received does not match requested rate\"\n    );\n    require(\n      exchange.isAllowableRate(token, requestedRate),\n      \"requested rate is beyond the allowable bounds\"\n    );\n    return true;\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/EtherPaymentFallback.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title EtherPaymentFallback - A contract that has a fallback to accept ether payments\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract EtherPaymentFallback {\n    event SafeReceived(address indexed sender, uint256 value);\n\n    /// @dev Fallback function accepts Ether transactions.\n    receive() external payable {\n        emit SafeReceived(msg.sender, msg.value);\n    }\n}\n"
        },
        {
          "Filename": "contracts/PrepaidCardMarket.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"./core/Ownable.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\";\n\nimport \"./core/Versionable.sol\";\nimport \"./IPrepaidCardMarket.sol\";\nimport \"./PrepaidCardManager.sol\";\nimport \"./ActionDispatcher.sol\";\nimport \"./VersionManager.sol\";\n\ncontract PrepaidCardMarket is Ownable, Versionable, IPrepaidCardMarket {\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n\n  struct SKU {\n    address issuer;\n    address issuingToken;\n    uint256 faceValue;\n    string customizationDID;\n  }\n  struct Reservation {\n    bytes32 reservationId;\n    address customer;\n    uint256 blockNumber;\n  }\n\n  event Setup();\n  event ItemSet(\n    address prepaidCard,\n    address issuer,\n    address issuingToken,\n    uint256 faceValue,\n    string customizationDID,\n    bytes32 sku\n  );\n  event ItemRemoved(address prepaidCard, address issuer, bytes32 sku);\n  event AskSet(\n    address issuer,\n    address issuingToken,\n    bytes32 sku,\n    uint256 askPrice\n  );\n  event ProvisionedPrepaidCard(\n    address prepaidCard,\n    address customer,\n    bytes32 sku,\n    uint256 askPrice\n  );\n  event PausedToggled(bool paused);\n\n  // keccak256 hash of the “isValidSignature(bytes,bytes)“, with the first argument deviating from the specification’s bytes32, due\n  // to needing compatibility with gnosis safe which also deviates from the spec in this way\n  bytes4 internal constant EIP1271_MAGIC_VALUE = 0x20c13b0b;\n  bytes4 internal constant SWAP_OWNER = 0xe318b52b; //swapOwner(address,address,address)\n  uint256 internal nonce;\n  address public prepaidCardManagerAddress;\n  address public actionDispatcher;\n  address public provisioner;\n\n  mapping(bytes32 => EnumerableSetUpgradeable.AddressSet) internal inventory; // sku => prepaid card addresses\n  mapping(bytes32 => uint256) public asks; // sku => ask price (in issuing token)\n  mapping(bytes32 => SKU) public skus; // sku => sku data\n  mapping(address => address) public provisionedCards; // prepaid card => EOA\n  mapping(bytes32 => bool) internal signatures;\n  bool public paused;\n  address public versionManager;\n\n  modifier onlyHandlersOrPrepaidCardManager() {\n    require(\n      ActionDispatcher(actionDispatcher).isHandler(msg.sender) ||\n        msg.sender == prepaidCardManagerAddress,\n      \"caller is not a registered action handler or PrepaidCardManager\"\n    );\n    _;\n  }\n  modifier onlyHandlers() {\n    require(\n      ActionDispatcher(actionDispatcher).isHandler(msg.sender),\n      \"caller is not a registered action handler\"\n    );\n    _;\n  }\n  modifier onlyProvisionerOrOwner() {\n    require(\n      (owner() == _msgSender()) || msg.sender == provisioner,\n      \"caller is not the provisioner nor the owner\"\n    );\n    _;\n  }\n\n  function initialize(address owner) external override initializer {\n    nonce = 0;\n    paused = false;\n    OwnableInitialize(owner);\n  }\n\n  function setup(\n    address _prepaidCardManager,\n    address _actionDispatcher,\n    address _provisioner,\n    address _versionManager\n  ) external onlyOwner {\n    require(_prepaidCardManager != address(0), \"prepaidCardManager not set\");\n    require(_actionDispatcher != address(0), \"actionDispatcher not set\");\n    require(_provisioner != address(0), \"provisioner not set\");\n    require(_versionManager != address(0), \"versionManager not set\");\n\n    prepaidCardManagerAddress = _prepaidCardManager;\n    provisioner = _provisioner;\n    actionDispatcher = _actionDispatcher;\n    versionManager = _versionManager;\n\n    emit Setup();\n  }\n\n  // TODO: Remove once we refactor relayer and hub to use pause() and unpause().\n  // The latter is used to be compatible with OpenZeppelin's defender\n  // (https://docs.openzeppelin.com/defender/admin#pauseunpause)\n  function setPaused(bool _paused) external onlyOwner {\n    paused = _paused;\n    emit PausedToggled(_paused);\n  }\n\n  function pause() external onlyOwner {\n    paused = true;\n    emit PausedToggled(true);\n  }\n\n  function unpause() external onlyOwner {\n    paused = false;\n    emit PausedToggled(false);\n  }\n\n  function setItem(address issuer, address prepaidCard)\n    external\n    onlyHandlersOrPrepaidCardManager\n    returns (bool)\n  {\n    (address issuingToken, string memory customizationDID) = validateItem(\n      issuer,\n      prepaidCard\n    );\n    PrepaidCardManager prepaidCardManager = PrepaidCardManager(\n      prepaidCardManagerAddress\n    );\n    uint256 faceValue = prepaidCardManager.faceValue(prepaidCard);\n    bytes32 sku = getSKU(issuer, issuingToken, faceValue, customizationDID);\n    if (skus[sku].issuer == address(0)) {\n      skus[sku].issuer = issuer;\n      skus[sku].issuingToken = issuingToken;\n      skus[sku].faceValue = faceValue;\n      skus[sku].customizationDID = customizationDID;\n    }\n    inventory[sku].add(prepaidCard);\n    emit ItemSet(\n      prepaidCard,\n      issuer,\n      issuingToken,\n      faceValue,\n      customizationDID,\n      sku\n    );\n    return true;\n  }\n\n  function removeItems(address issuer, address[] calldata prepaidCards)\n    external\n    onlyHandlers\n    returns (bool)\n  {\n    PrepaidCardManager prepaidCardManager = PrepaidCardManager(\n      prepaidCardManagerAddress\n    );\n    require(\n      prepaidCards.length <= prepaidCardManager.MAXIMUM_NUMBER_OF_CARD(),\n      \"too many prepaid cards\"\n    );\n    for (uint256 i = 0; i < prepaidCards.length; i++) {\n      validateItem(issuer, prepaidCards[i]);\n      bytes memory signature = contractSignature(prepaidCards[i], issuer);\n      bytes32 sku = skuForPrepaidCard(prepaidCards[i]);\n      inventory[sku].remove(prepaidCards[i]);\n      signatures[keccak256(signature)] = true;\n      // note that this is not a token transfer, so linter concerns around reetrancy\n      // after transfer are not valid\n      /* solhint-disable reentrancy */\n      prepaidCardManager.transfer(payable(prepaidCards[i]), issuer, signature);\n      signatures[keccak256(signature)] = false;\n      /* solhint-enable reentrancy */\n      emit ItemRemoved(prepaidCards[i], issuer, sku);\n    }\n    return true;\n  }\n\n  // Until we allow the purchase of prepaid cards directly from this contract, the\n  // ask price will need to be enforced off-chain (in the card wallet app)\n  function setAsk(\n    address issuer,\n    bytes32 sku,\n    uint256 askPrice // a \"0\" askPrice removes the SKU from the market\n  ) external override onlyHandlers returns (bool) {\n    require(skus[sku].issuer != address(0), \"Non-existent SKU\");\n    require(skus[sku].issuer == issuer, \"SKU not owned by issuer\");\n    asks[sku] = askPrice;\n\n    emit AskSet(issuer, skus[sku].issuingToken, sku, askPrice);\n    return true;\n  }\n\n  function provisionPrepaidCard(address customer, bytes32 sku)\n    external\n    override\n    onlyProvisionerOrOwner\n    returns (bool)\n  {\n    require(!paused, \"Contract is paused\");\n    require(inventory[sku].length() > 0, \"No more prepaid cards for sku\");\n    require(asks[sku] > 0, \"No ask price for sku\");\n\n    address prepaidCard = inventory[sku].at(0);\n    provisionedCards[prepaidCard] = customer;\n    bytes memory signature = contractSignature(prepaidCard, customer);\n    signatures[keccak256(signature)] = true;\n    inventory[sku].remove(prepaidCard);\n    // note that this is not a token transfer, so linter concerns around reetrancy\n    // after transfer are not valid\n    /* solhint-disable reentrancy */\n    PrepaidCardManager(prepaidCardManagerAddress).transfer(\n      payable(prepaidCard),\n      customer,\n      signature\n    );\n    signatures[keccak256(signature)] = false;\n    /* solhint-enable reentrancy */\n\n    emit ProvisionedPrepaidCard(prepaidCard, customer, sku, asks[sku]);\n    return true;\n  }\n\n  function getSKU(\n    address issuer,\n    address token,\n    uint256 faceValue,\n    string memory customizationDID\n  ) public pure returns (bytes32) {\n    return\n      keccak256(abi.encodePacked(issuer, token, faceValue, customizationDID));\n  }\n\n  function getSkuInfo(bytes32 sku)\n    external\n    view\n    override\n    returns (\n      address issuer,\n      address issuingToken,\n      uint256 faceValue,\n      string memory customizationDID\n    )\n  {\n    issuer = skus[sku].issuer;\n    issuingToken = skus[sku].issuingToken;\n    faceValue = skus[sku].faceValue;\n    customizationDID = skus[sku].customizationDID;\n  }\n\n  function skuForPrepaidCard(address prepaidCard)\n    public\n    view\n    returns (bytes32)\n  {\n    PrepaidCardManager prepaidCardManager = PrepaidCardManager(\n      prepaidCardManagerAddress\n    );\n    require(\n      !prepaidCardManager.hasBeenUsed(prepaidCard),\n      \"Can't get SKU for used prepaid card\"\n    );\n    (\n      address issuer,\n      address issuingToken,\n      ,\n      string memory customizationDID,\n      ,\n\n    ) = prepaidCardManager.cardDetails(prepaidCard);\n    uint256 faceValue = prepaidCardManager.faceValue(prepaidCard);\n    return getSKU(issuer, issuingToken, faceValue, customizationDID);\n  }\n\n  function getInventory(bytes32 sku) external view returns (address[] memory) {\n    return inventory[sku].values();\n  }\n\n  function getQuantity(bytes32 sku) external view returns (uint256) {\n    return inventory[sku].length();\n  }\n\n  function contractSignature(address prepaidCard, address newOwner)\n    internal\n    returns (bytes memory)\n  {\n    nonce++;\n    return\n      abi.encodePacked(\n        keccak256(abi.encodePacked(address(this), prepaidCard, newOwner, nonce))\n      );\n  }\n\n  function isValidSignature(\n    bytes memory, // data\n    bytes memory signature\n  ) external view returns (bytes4) {\n    return\n      signatures[keccak256(signature)] && !paused\n        ? EIP1271_MAGIC_VALUE\n        : bytes4(0);\n  }\n\n  function validateItem(address issuer, address prepaidCard)\n    internal\n    view\n    returns (address issuingToken, string memory customizationDID)\n  {\n    PrepaidCardManager prepaidCardManager = PrepaidCardManager(\n      prepaidCardManagerAddress\n    );\n    address expectedIssuer;\n    (expectedIssuer, issuingToken, , customizationDID, , ) = prepaidCardManager\n      .cardDetails(prepaidCard);\n\n    require(\n      prepaidCardManager.getPrepaidCardOwner(payable(prepaidCard)) ==\n        address(this),\n      \"Market contract does not own the prepaid card\"\n    );\n    require(\n      expectedIssuer == issuer,\n      \"Specified issuer is not the issuer of the prepaid card\"\n    );\n    require(\n      !prepaidCardManager.hasBeenUsed(prepaidCard),\n      \"Prepaid card has been used\"\n    );\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "contracts/PrepaidCardManager.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol\";\nimport \"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\";\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"./core/Ownable.sol\";\n\nimport \"./token/IERC677.sol\";\nimport \"./PrepaidCardMarket.sol\";\nimport \"./TokenManager.sol\";\nimport \"./core/Safe.sol\";\nimport \"./core/Versionable.sol\";\nimport \"./SupplierManager.sol\";\nimport \"./Exchange.sol\";\nimport \"./ActionDispatcher.sol\";\nimport \"./VersionManager.sol\";\n\ncontract PrepaidCardManager is Ownable, Versionable, Safe {\n  using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n  using SafeERC20Upgradeable for IERC677;\n\n  struct CardDetail {\n    address issuer;\n    address issueToken;\n    uint256 blockNumber;\n    string customizationDID;\n    bool reloadable;\n    bool canPayNonMerchants;\n  }\n  // this is deprecated remove this when it becomes possible\n  struct GasPolicy {\n    bool useIssuingTokenForGas;\n    bool payGasRecipient;\n  }\n  struct GasPolicyV2 {\n    bool useGasPrice;\n  }\n  struct MaterializedGasPolicy {\n    address gasToken;\n    uint256 gasPrice;\n  }\n  struct ExecTransactionData {\n    string action;\n    address payable prepaidCard;\n    address to;\n    bytes data;\n  }\n\n  event Setup();\n  event CreatePrepaidCard(\n    address issuer,\n    address owner,\n    address card,\n    address token,\n    address createdFromDepot,\n    uint256 issuingTokenAmount,\n    uint256 spendAmount,\n    uint256 gasFeeCollected,\n    string customizationDID\n  );\n  event TransferredPrepaidCard(\n    address prepaidCard,\n    address previousOwner,\n    address newOwner\n  );\n  event GasPolicyAdded(string action, bool useGasPrice);\n  event ContractSignerRemoved(address signer);\n  event TrustedCallerForCreatingPrepaidCardsWithIssuerRemoved(address caller);\n  event PrepaidCardSend(\n    address prepaidCard,\n    uint256 spendAmount,\n    uint256 rateLock,\n    uint256 gasPrice,\n    uint256 safeTxGas,\n    uint256 baseGas,\n    string action,\n    bytes data,\n    bytes ownerSignature\n  );\n  event PrepaidCardUsed(address card);\n\n  bytes4 public constant SWAP_OWNER = 0xe318b52b; //swapOwner(address,address,address)\n  bytes4 public constant TRANSFER_AND_CALL = 0x4000aea0; //transferAndCall(address,uint256,bytes)\n  uint8 public constant MAXIMUM_NUMBER_OF_CARD = 15;\n  uint256 public constant MINIMUM_MERCHANT_PAYMENT = 50; //in units of SPEND\n  address payable public actionDispatcher;\n  address payable public gasFeeReceiver;\n  mapping(address => CardDetail) public cardDetails;\n  uint256 public gasFeeInCARD;\n  uint256 public maximumFaceValue;\n  uint256 public minimumFaceValue;\n  address public gasToken;\n  address public exchangeAddress;\n  address public tokenManager;\n  address public supplierManager;\n  mapping(string => GasPolicy) public gasPolicies; // this is deprecated, remove it when possible\n  mapping(address => bool) public hasBeenSplit; // this is deprecated, remove it when possible\n  mapping(address => bool) public hasBeenUsed;\n  EnumerableSetUpgradeable.AddressSet internal contractSigners;\n  mapping(string => GasPolicyV2) public gasPoliciesV2;\n  address public versionManager;\n  EnumerableSetUpgradeable.AddressSet\n    internal trustedCallersForCreatingPrepaidCardsWithIssuer;\n\n  modifier onlyHandlers() {\n    require(\n      ActionDispatcher(actionDispatcher).isHandler(msg.sender),\n      \"caller is not a registered action handler\"\n    );\n    _;\n  }\n  modifier onlyHandlersAndContractSigners() {\n    require(\n      ActionDispatcher(actionDispatcher).isHandler(msg.sender) ||\n        contractSigners.contains(msg.sender),\n      \"caller is not a registered action handler nor contract signer\"\n    );\n    _;\n  }\n\n  /**\n   * @dev Setup function sets initial storage of contract.\n   * @param _tokenManager the address of the Token Manager contract\n   * @param _supplierManager the address of the Supplier Manager contract\n   * @param _exchangeAddress the address of the Exchange contract\n   * @param _gsMasterCopy Gnosis safe Master Copy address\n   * @param _gsProxyFactory Gnosis safe Proxy Factory address\n   * @param _actionDispatcher Action Dispatcher address\n   * @param _gasFeeReceiver The address that will receive the new prepaid card gas fee. Fee is not distributed if this is address(0)\n   * @param _gasFeeInCARD the amount to charge for the gas fee for new prepaid card in units of CARD wei\n   * @param _minAmount The minimum face value of a new prepaid card in units of SPEND\n   * @param _maxAmount The maximum face value of a new prepaid card in units of SPEND\n   */\n  function setup(\n    address _tokenManager,\n    address _supplierManager,\n    address _exchangeAddress,\n    address _gsMasterCopy,\n    address _gsProxyFactory,\n    address payable _actionDispatcher,\n    address payable _gasFeeReceiver,\n    uint256 _gasFeeInCARD,\n    uint256 _minAmount,\n    uint256 _maxAmount,\n    address[] calldata _contractSigners,\n    address[] calldata _trustedCallersForCreatingPrepaidCardsWithIssuer,\n    address _versionManager\n  ) external onlyOwner {\n    require(_tokenManager != address(0), \"tokenManager not set\");\n    require(_supplierManager != address(0), \"supplierManager not set\");\n    require(_exchangeAddress != address(0), \"exchangeAddress not set\");\n    require(_gsMasterCopy != address(0), \"gsMasterCopy not set\");\n    require(_gsProxyFactory != address(0), \"gsProxyFactory not set\");\n    require(_actionDispatcher != address(0), \"actionDispatcher not set\");\n    require(_versionManager != address(0), \"versionManager not set\");\n\n    actionDispatcher = _actionDispatcher;\n    supplierManager = _supplierManager;\n    tokenManager = _tokenManager;\n    exchangeAddress = _exchangeAddress;\n    gasFeeReceiver = _gasFeeReceiver;\n    gasFeeInCARD = _gasFeeInCARD;\n    minimumFaceValue = _minAmount;\n    maximumFaceValue = _maxAmount;\n    versionManager = _versionManager;\n    Safe.setup(_gsMasterCopy, _gsProxyFactory);\n    for (uint256 i = 0; i < _contractSigners.length; i++) {\n      require(\n        _contractSigners[i] != address(0),\n        \"address in contractSigners not set\"\n      );\n\n      contractSigners.add(_contractSigners[i]);\n    }\n    for (\n      uint256 i = 0;\n      i < _trustedCallersForCreatingPrepaidCardsWithIssuer.length;\n      i++\n    ) {\n      trustedCallersForCreatingPrepaidCardsWithIssuer.add(\n        _trustedCallersForCreatingPrepaidCardsWithIssuer[i]\n      );\n    }\n    emit Setup();\n  }\n\n  /**\n   * @dev Adds a new gas policy for a send action\n   * @param action the send action the policy is for\n   * @param useGasPrice true if we want to use the gas price as provided from the\n   * relay server instead of relying on a fee to cover the gas cost\n   */\n  function addGasPolicy(string calldata action, bool useGasPrice)\n    external\n    onlyOwner\n    returns (bool)\n  {\n    gasPoliciesV2[action].useGasPrice = useGasPrice;\n\n    emit GasPolicyAdded(action, useGasPrice);\n    return true;\n  }\n\n  function removeContractSigner(address signer) external onlyOwner {\n    require(contractSigners.contains(signer), \"signer not present\");\n    contractSigners.remove(signer);\n    emit ContractSignerRemoved(signer);\n  }\n\n  function removeTrustedCallerForCreatingPrepaidCardsWithIssuer(address caller)\n    external\n    onlyOwner\n  {\n    require(\n      trustedCallersForCreatingPrepaidCardsWithIssuer.contains(caller),\n      \"caller not present\"\n    );\n    trustedCallersForCreatingPrepaidCardsWithIssuer.remove(caller);\n    emit TrustedCallerForCreatingPrepaidCardsWithIssuerRemoved(caller);\n  }\n\n  /**\n   * @dev onTokenTransfer(ERC677) - this is the ERC677 token transfer callback.\n   *\n   * When tokens are sent to this contract, this function will create multiple\n   * prepaid cards as gnosis safes.\n   *\n   * See PrepaidCardManager in README for more information.\n   *\n   * @param from supplier or Prepaid card address\n   * @param amount number of tokens sent\n   * @param data encoded as (\n   *  address owner (supplier's address),\n   *  uint256[] issuingTokenAmounts (array of issuing token amounts to fund the creation of the prepaid cards),\n   *  uint256[] spendAmounts (array of spend amounts that represent the desired face value (for reporting only)),\n   *  string customizationDID (DID of prepaid card customization data),\n   *  address marketAddress (prepaid card market address)\n   * )\n   */\n  function onTokenTransfer(\n    address from,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool) {\n    require(\n      TokenManager(tokenManager).isValidToken(msg.sender),\n      \"calling token is unaccepted\"\n    );\n\n    (\n      address owner,\n      uint256[] memory issuingTokenAmounts,\n      uint256[] memory spendAmounts,\n      string memory customizationDID,\n      address marketAddress,\n      address issuer,\n      address issuerSafe\n    ) = abi.decode(\n        data,\n        (address, uint256[], uint256[], string, address, address, address)\n      );\n\n    require(\n      owner != address(0) && issuingTokenAmounts.length > 0,\n      \"Prepaid card data invalid\"\n    );\n\n    // The spend amounts are for reporting purposes only, there is no on-chain\n    // effect from this value. Although, it might not be a bad idea that spend\n    // amounts line up with the issuing token amounts--albiet we'd need to\n    // introduce a rate lock mechanism if we wanted to validate this\n    require(\n      issuingTokenAmounts.length == spendAmounts.length,\n      \"the amount arrays have differing lengths\"\n    );\n\n    // When issuer and issuerSafe are blank, it means the call is related to the\n    // process where a prepaid card is first created, using the provided issuer as\n    // the owner, and later provisioned and transfered to the customer (customer's\n    // EOA is the new owner).\n\n    if (\n      (issuer == address(0) && issuerSafe == address(0)) ||\n      !trustedCallersForCreatingPrepaidCardsWithIssuer.contains(from)\n    ) {\n      createPrepaidCards(\n        owner, // issuer\n        owner,\n        from, // depot\n        _msgSender(), // token\n        amount,\n        issuingTokenAmounts,\n        spendAmounts,\n        customizationDID,\n        marketAddress\n      );\n    } else {\n      // In case when issuer and issuerSafe are provided, it means the tokens are being\n      // sent from the PrepaidCardMarketV2 contract where the prepaid cards are being\n      // created and provisioned in a single step, where the issuer and owner (customer's EOA)\n      // are provided during the creation of the prepaid cards.\n\n      createPrepaidCards(\n        issuer,\n        owner,\n        issuerSafe, // depot\n        _msgSender(), // token\n        amount,\n        issuingTokenAmounts,\n        spendAmounts,\n        customizationDID,\n        marketAddress\n      );\n    }\n\n    return true;\n  }\n\n  function setPrepaidCardUsed(address prepaidCard)\n    external\n    onlyHandlers\n    returns (bool)\n  {\n    hasBeenUsed[prepaidCard] = true;\n    emit PrepaidCardUsed(prepaidCard);\n    return true;\n  }\n\n  /**\n   * @dev returns the face value for the prepaid card as units of SPEND.\n   * @param prepaidCard the address of the prepaid card for which to get a face value\n   */\n  function faceValue(address prepaidCard) external view returns (uint256) {\n    address issuingToken = cardDetails[prepaidCard].issueToken;\n    uint256 issuingTokenBalance = IERC677(issuingToken).balanceOf(prepaidCard);\n    Exchange exchange = Exchange(exchangeAddress);\n    return exchange.convertToSpend(issuingToken, issuingTokenBalance);\n  }\n\n  /**\n   * @dev get the price in the specified token (in units of wei) to acheive the\n   * specified face value in units of SPEND. Note that the face value will drift\n   * afterwards based on the exchange rate\n   * @param token the issuing token for the prepaid card\n   * @param spendFaceValue the desired face value for the prepaid card\n   */\n  function priceForFaceValue(address token, uint256 spendFaceValue)\n    external\n    view\n    returns (uint256)\n  {\n    return\n      Exchange(exchangeAddress).convertFromSpend(token, spendFaceValue) +\n      gasFee(token) +\n      100; // this is to deal with any rounding errors\n  }\n\n  /**\n   * @dev get the addresses that are configured as EIP-1271 signers for prepaid cards\n   */\n  function getContractSigners() external view returns (address[] memory) {\n    return contractSigners.values();\n  }\n\n  /**\n   * @dev get the addresses that are allowed to create cards with provided issuer\n   */\n  function getTrustedCallersForCreatingPrepaidCardsWithIssuer()\n    external\n    view\n    returns (address[] memory)\n  {\n    return trustedCallersForCreatingPrepaidCardsWithIssuer.values();\n  }\n\n  /**\n   * @dev returns a boolean indicating if the prepaid card's owner is an EIP-1271 signer\n   * @param prepaidCard prepaid card address\n   */\n  function isEIP1271Signer(address payable prepaidCard)\n    public\n    view\n    returns (bool)\n  {\n    return contractSigners.contains(getPrepaidCardOwner(prepaidCard));\n  }\n\n  /**\n   * @dev Pay token to merchant\n   * @param prepaidCard Prepaid Card's address\n   * @param spendAmount The amount of SPEND to send\n   * @param rateLock the price of the issuing token in USD\n   * @param gasPrice the price of the gas in terms of the gas token\n   * @param safeTxGas the gas to use for the safeTx, this comes from the relay server (when gasPrice is 0 this is assumed to use nearly all the available gas)\n   * @param baseGas this is the amount of gas that is independent of the specific Safe transactions, but used for general things such as signature checks and the base transaction fee. this comes from the relay server\n   * @param action the name of the prepaid card action to perform, e.g. \"payMerchant\", \"registerMerchant\", \"claimRevenue\", etc.\n   * @param data encoded data that is specific to the action being performed, e.g. the merchant safe address for the \"payMerchant\" action, the info DID for the \"registerMerchant\", etc.\n   * @param ownerSignature Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n   */\n  function send(\n    address payable prepaidCard,\n    uint256 spendAmount,\n    uint256 rateLock,\n    uint256 gasPrice,\n    uint256 safeTxGas,\n    uint256 baseGas,\n    string calldata action,\n    bytes calldata data,\n    bytes calldata ownerSignature\n  ) external returns (bool) {\n    ExecTransactionData memory exTxData = validatedSendFields(\n      prepaidCard,\n      spendAmount,\n      action,\n      rateLock,\n      data\n    );\n    emit PrepaidCardSend(\n      prepaidCard,\n      spendAmount,\n      rateLock,\n      gasPrice,\n      safeTxGas,\n      baseGas,\n      action,\n      data,\n      ownerSignature\n    );\n    return\n      execTransaction(exTxData, ownerSignature, gasPrice, safeTxGas, baseGas);\n  }\n\n  /**\n   * @dev Returns the bytes that are hashed to be signed by owner.\n   * @param prepaidCard The prepaid card to use for sending\n   * @param spendAmount The amount of SPEND to pay the merchant\n   * @param rateLock the price of the issuing token in USD\n   * @param action the name of the prepaid card action to perform, e.g. \"payMerchant\", \"registerMerchant\", \"claimRevenue\", etc.\n   * @param data encoded data that is specific to the action being performed, e.g. the merchant safe address for the \"payMerchant\" action, the info DID for the \"registerMerchant\", etc.\n   */\n  function getSendData(\n    address payable prepaidCard,\n    uint256 spendAmount,\n    uint256 rateLock,\n    string memory action,\n    bytes memory data\n  ) public view returns (bytes memory) {\n    uint256 tokenAmount = Exchange(exchangeAddress).convertFromSpendWithRate(\n      cardDetails[prepaidCard].issueToken,\n      spendAmount,\n      rateLock\n    );\n    return\n      abi.encodeWithSelector(\n        TRANSFER_AND_CALL,\n        actionDispatcher,\n        tokenAmount,\n        abi.encode(spendAmount, rateLock, action, data)\n      );\n  }\n\n  /**\n   * @dev sell card for customer\n   * @param prepaidCard Prepaid Card's address\n   * @param newOwner the new owner of the prepaid card (the customer)\n   * @param previousOwnerSignature Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n   */\n  function transfer(\n    address payable prepaidCard,\n    address newOwner,\n    bytes calldata previousOwnerSignature\n  ) external onlyHandlersAndContractSigners returns (bool) {\n    address previousOwner = getPrepaidCardOwner(prepaidCard);\n    require(\n      cardDetails[prepaidCard].issuer == previousOwner ||\n        contractSigners.contains(previousOwner),\n      \"Has already been transferred\"\n    );\n    require(\n      !hasBeenUsed[prepaidCard],\n      \"Cannot transfer prepaid card that has already been used\"\n    );\n    execTransaction(\n      ExecTransactionData(\n        \"transfer\",\n        prepaidCard,\n        prepaidCard,\n        getTransferCardData(prepaidCard, newOwner)\n      ),\n      previousOwnerSignature,\n      // use a 0 gas price because the outer safe tx will be paying for the gas\n      0,\n      0,\n      0\n    );\n    emit TransferredPrepaidCard(prepaidCard, previousOwner, newOwner);\n\n    return true;\n  }\n\n  /**\n   * @dev Returns the bytes that are hashed to be signed by owner\n   * @param prepaidCard the prepaid card address\n   * @param newOwner Customer's address\n   */\n  function getTransferCardData(address payable prepaidCard, address newOwner)\n    public\n    view\n    returns (bytes memory)\n  {\n    // Swap owner\n    address oldOwner = getPrepaidCardOwner(prepaidCard);\n    return\n      abi.encodeWithSelector(SWAP_OWNER, address(this), oldOwner, newOwner);\n  }\n\n  /**\n   * @dev check amount of card want to create.\n   * convert amount to spend and check.\n   */\n  function isValidAmount(address token, uint256 amount)\n    public\n    view\n    returns (bool)\n  {\n    uint256 amountInSPEND = Exchange(exchangeAddress).convertToSpend(\n      token,\n      amount - gasFee(token)\n    );\n    return (minimumFaceValue <= amountInSPEND &&\n      amountInSPEND <= maximumFaceValue);\n  }\n\n  function gasFee(address token) public view returns (uint256) {\n    if (gasFeeReceiver == address(0)) {\n      return 0;\n    } else {\n      return Exchange(exchangeAddress).convertFromCARD(token, gasFeeInCARD);\n    }\n  }\n\n  function getPrepaidCardOwner(address payable prepaidCard)\n    public\n    view\n    returns (address)\n  {\n    address[] memory owners = GnosisSafe(prepaidCard).getOwners();\n    require(owners.length == 2, \"unexpected number of owners for prepaid card\");\n    return owners[0] == address(this) ? owners[1] : owners[0];\n  }\n\n  function getPrepaidCardIssuer(address prepaidCard)\n    external\n    view\n    returns (address)\n  {\n    return cardDetails[prepaidCard].issuer;\n  }\n\n  function validatedSendFields(\n    address prepaidCard,\n    uint256 spendAmount,\n    string memory action,\n    uint256 rateLock,\n    bytes memory data\n  ) private view returns (ExecTransactionData memory) {\n    require(\n      cardDetails[prepaidCard].blockNumber < block.number,\n      \"prepaid card used too soon\"\n    );\n    require(\n      Exchange(exchangeAddress).isAllowableRate(\n        cardDetails[prepaidCard].issueToken,\n        rateLock\n      ),\n      \"requested rate is beyond the allowable bounds\"\n    );\n    return\n      ExecTransactionData(\n        action,\n        payable(prepaidCard),\n        cardDetails[prepaidCard].issueToken,\n        getSendData(payable(prepaidCard), spendAmount, rateLock, action, data)\n      );\n  }\n\n  /**\n   * @dev Split Prepaid card\n   * @param owner Supplier address\n   * @param depot The Supplier's depot safe\n   * @param token Token address\n   * @param amountReceived Amount to split\n   * @param issuingTokenAmounts array of issuing token amounts to use to fund the creation of the prepaid card\n   * @param spendAmounts array of spend amounts that represent the desired face value (for reporting only)\n   * @param customizationDID the customization DID for the new prepaid cards\n   */\n  function createPrepaidCards(\n    address issuer,\n    address owner,\n    address depot,\n    address token,\n    uint256 amountReceived,\n    uint256[] memory issuingTokenAmounts,\n    uint256[] memory spendAmounts,\n    string memory customizationDID,\n    address marketAddress\n  ) private returns (bool) {\n    uint256 neededAmount = 0;\n    uint256 numberCard = issuingTokenAmounts.length;\n    require(\n      numberCard <= MAXIMUM_NUMBER_OF_CARD,\n      \"Too many prepaid cards requested\"\n    );\n\n    for (uint256 i = 0; i < numberCard; i++) {\n      require(\n        isValidAmount(token, issuingTokenAmounts[i]),\n        \"Amount below threshold\"\n      );\n      neededAmount = neededAmount + issuingTokenAmounts[i];\n    }\n\n    require(\n      amountReceived >= neededAmount,\n      \"Insufficient funds sent for requested amounts\"\n    );\n    for (uint256 i = 0; i < numberCard; i++) {\n      createPrepaidCard(\n        issuer,\n        owner,\n        depot,\n        token,\n        issuingTokenAmounts[i],\n        spendAmounts[i],\n        customizationDID,\n        marketAddress\n      );\n    }\n\n    // refund the supplier any excess funds that they provided\n    if (amountReceived > neededAmount) {\n      IERC677(token).safeTransfer(depot, amountReceived - neededAmount);\n    }\n\n    return true;\n  }\n\n  /**\n   * @dev Create Prepaid card\n   * @param issuer issuer address\n   * @param owner owner address\n   * @param token token address\n   * @param issuingTokenAmount amount of issuing token to use to fund the new prepaid card\n   * @param spendAmount the desired face value for the new prepaid card (for reporting purposes only)\n   * @param customizationDID the customization DID for the new prepaid cards\n   * @return PrepaidCard address\n   */\n  function createPrepaidCard(\n    address issuer,\n    address owner,\n    address depot,\n    address token,\n    uint256 issuingTokenAmount,\n    uint256 spendAmount,\n    string memory customizationDID,\n    address marketAddress\n  ) private returns (address) {\n    address[] memory owners = new address[](2);\n\n    owners[0] = address(this);\n    owners[1] = marketAddress != address(0) ? marketAddress : owner;\n\n    address card = createSafe(owners, 2);\n\n    // card was created\n    cardDetails[card].issuer = issuer;\n    cardDetails[card].issueToken = token;\n    cardDetails[card].customizationDID = customizationDID;\n    cardDetails[card].blockNumber = block.number;\n    cardDetails[card].reloadable = false; // future functionality\n    cardDetails[card].canPayNonMerchants = false; // future functionality\n    uint256 _gasFee = gasFee(token);\n    if (gasFeeReceiver != address(0) && _gasFee > 0) {\n      // The gasFeeReceiver is a trusted address that we control\n      IERC677(token).safeTransfer(gasFeeReceiver, _gasFee);\n    }\n    // The card is a trusted contract (gnosis safe)\n    IERC677(token).safeTransfer(card, issuingTokenAmount - _gasFee);\n\n    emit CreatePrepaidCard(\n      issuer,\n      owner,\n      card,\n      token,\n      depot,\n      issuingTokenAmount - _gasFee,\n      spendAmount,\n      _gasFee,\n      customizationDID\n    );\n\n    if (marketAddress != address(0)) {\n      PrepaidCardMarket(marketAddress).setItem(owner, card);\n    }\n\n    return card;\n  }\n\n  /**\n   * @dev adapter execTransaction for prepaid card(gnosis safe)\n   * @param exData an ExecTransactionData struct populated with the data to be executed\n   * @param signature Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n   * @param gasPrice the price for gas in terms of the gas token\n   * @param safeTxGas the estimated gas for the safe tx (when the gasPrice is 0, then this is not used)\n   */\n  function execTransaction(\n    ExecTransactionData memory exData,\n    bytes memory signature,\n    uint256 gasPrice,\n    uint256 safeTxGas,\n    uint256 baseGas\n  ) private returns (bool) {\n    MaterializedGasPolicy memory gasPolicy = getMaterializedGasPolicy(\n      exData.action,\n      exData.prepaidCard,\n      gasPrice\n    );\n    bytes memory signatures = isEIP1271Signer(exData.prepaidCard)\n      ? appendToEIP1271Signature(exData.prepaidCard, signature)\n      : addOwnSignature(exData.prepaidCard, signature);\n    require(\n      GnosisSafe(exData.prepaidCard).execTransaction(\n        exData.to,\n        0,\n        exData.data,\n        Enum.Operation.Call,\n        safeTxGas,\n        baseGas,\n        gasPolicy.gasPrice,\n        gasPolicy.gasToken,\n        payable(address(0)),\n        signatures\n      ),\n      \"safe transaction was reverted\"\n    );\n\n    return true;\n  }\n\n  function getMaterializedGasPolicy(\n    string memory action,\n    address prepaidCard,\n    uint256 gasPrice\n  ) internal view returns (MaterializedGasPolicy memory) {\n    return\n      MaterializedGasPolicy(\n        cardDetails[prepaidCard].issueToken,\n        gasPoliciesV2[action].useGasPrice ? gasPrice : 0\n      );\n  }\n\n  /**\n   * We are using a Prevalidated Signature (v = 1) type of signature for\n   * signing from this contract (as opposed to EIP-1271, v = 0).\n   * https://docs.gnosis.io/safe/docs/contracts_signatures/#pre-validated-signatures\n   * This particular type of signature is a \"pre-approved\" signature. This\n   * signature is considered valid only when the sender of gnosis safe exec\n   * txn is the address within the signature or a GnosisSafe.approveHash() has\n   * been called from the address within the signature on the safe in\n   * question. In our case, since this contract issues\n   * GnosisSafe.execTransaction() (in the execTransaction() function), we can\n   * take advantage of the fact that all gnosis safe txn's will be sent from\n   * this contract's address.\n   *\n   * signature type == 1\n   * s = ignored\n   * r = contract address with padding to 32 bytes\n   * {32-bytes r}{32-bytes s}{1-byte signature type}\n   */\n  function getOwnSignature()\n    internal\n    view\n    returns (bytes memory contractSignature)\n  {\n    // Create signature\n    contractSignature = new bytes(65);\n    bytes memory encodeData = abi.encode(this, address(0));\n    for (uint256 i = 1; i <= 64; i++) {\n      contractSignature[64 - i] = encodeData[encodeData.length - i];\n    }\n    bytes1 v = 0x01;\n    contractSignature[64] = v;\n  }\n\n  /**\n   * @dev Append the contract's own signature to the EOA signature we received from\n   * the safe owner\n   * @param prepaidCard the prepaid card address\n   * @param signature Owner's EOA signature\n   */\n  function addOwnSignature(address payable prepaidCard, bytes memory signature)\n    internal\n    view\n    returns (bytes memory signatures)\n  {\n    require(signature.length == 65, \"Invalid signature!\");\n\n    address owner = getPrepaidCardOwner(prepaidCard);\n    bytes memory ownSignature = getOwnSignature();\n    signatures = new bytes(130); // 2 x 65 bytes\n    // Gnosis safe signatures must be sorted by owners' address.\n    if (address(this) > owner) {\n      signatures = abi.encodePacked(signature, ownSignature);\n    } else {\n      signatures = abi.encodePacked(ownSignature, signature);\n    }\n  }\n\n  /**\n   * @dev Append the contract's own signature to an EIP-1271 signature we received from\n   * the safe owner\n   * @param prepaidCard the prepaid card address\n   * @param signature Owner's EIP-1271 signature data\n   */\n  function appendToEIP1271Signature(\n    address payable prepaidCard,\n    bytes memory signature\n  ) public view returns (bytes memory signatures) {\n    address owner = getPrepaidCardOwner(prepaidCard);\n    bytes memory ownSignature = getOwnSignature();\n    uint256 eip1271SignatureLength = signature.length;\n    bytes1 v = 0x00;\n    // R,S,V vector for EIP-1271 signature where\n    // R = the owner address\n    // S = the byte offset to find the signature data\n    //     which is 2 x 65 bytes because the threshold\n    //     is 2 and each RSV vector is 65 bytes\n    // V = signature type, 0x00 is for EIP-1271 signatures\n    bytes memory eip1271RSV = abi.encodePacked(\n      abi.encode(owner),\n      abi.encode(uint256(130)),\n      v\n    );\n\n    // Gnosis safe signatures must be sorted by owners' address. and\n    // additionally EIP-1271 signatures should conclude with 32 bytes for the\n    // EIP-1271 signature length, and then finally the actual EIP-1271 signature\n    // data itself\n    signatures = address(this) > owner\n      ? abi.encodePacked(\n        eip1271RSV,\n        ownSignature,\n        eip1271SignatureLength,\n        signature\n      )\n      : abi.encodePacked(\n        ownSignature,\n        eip1271RSV,\n        eip1271SignatureLength,\n        signature\n      );\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/common/SignatureDecoder.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title SignatureDecoder - Decodes signatures that a encoded as bytes\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract SignatureDecoder {\n    /// @dev divides bytes signature into `uint8 v, bytes32 r, bytes32 s`.\n    /// @notice Make sure to peform a bounds check for @param pos, to avoid out of bounds access on @param signatures\n    /// @param pos which signature to read. A prior bounds check of this parameter should be performed, to avoid out of bounds access\n    /// @param signatures concatenated rsv signatures\n    function signatureSplit(bytes memory signatures, uint256 pos)\n        internal\n        pure\n        returns (\n            uint8 v,\n            bytes32 r,\n            bytes32 s\n        )\n    {\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let signaturePos := mul(0x41, pos)\n            r := mload(add(signatures, add(signaturePos, 0x20)))\n            s := mload(add(signatures, add(signaturePos, 0x40)))\n            // Here we are loading the last 32 bytes, including 31 bytes\n            // of 's'. There is no 'mload8' to do this.\n            //\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            v := and(mload(add(signatures, add(signaturePos, 0x41))), 0xff)\n        }\n    }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/base/Executor.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"../common/Enum.sol\";\n\n/// @title Executor - A contract that can execute transactions\n/// @author Richard Meissner - <richard@gnosis.pm>\ncontract Executor {\n    function execute(\n        address to,\n        uint256 value,\n        bytes memory data,\n        Enum.Operation operation,\n        uint256 txGas\n    ) internal returns (bool success) {\n        if (operation == Enum.Operation.DelegateCall) {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\n            }\n        } else {\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\n            }\n        }\n    }\n}\n"
        },
        {
          "Filename": "contracts/VersionManager.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"./core/Ownable.sol\";\n\ncontract VersionManager is Ownable {\n  string public version;\n\n  event VersionUpdate(string version);\n\n  function initialize(address owner) external override initializer {\n    // this is the version of the protocol that this contract is being\n    // introduced at.\n    version = \"0.8.3\";\n    OwnableInitialize(owner);\n  }\n\n  function setVersion(string calldata _version) external onlyOwner {\n    version = _version;\n    emit VersionUpdate(version);\n  }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/external/GnosisSafeMath.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/**\n * @title GnosisSafeMath\n * @dev Math operations with safety checks that revert on error\n * Renamed from SafeMath to GnosisSafeMath to avoid conflicts\n * TODO: remove once open zeppelin update to solc 0.5.0\n */\nlibrary GnosisSafeMath {\n    /**\n     * @dev Multiplies two numbers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two numbers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n"
        },
        {
          "Filename": "contracts/oracles/IPriceOracle.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\ninterface IPriceOracle {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function usdPrice() external view returns (uint256 price, uint256 updatedAt);\n\n  function ethPrice() external view returns (uint256 price, uint256 updatedAt);\n\n  function daiPrice() external view returns (uint256 price, uint256 updatedAt);\n\n  function isSnappedToUSD() external view returns (bool);\n}\n"
        },
        {
          "Filename": "contracts/SupplierManager.sol",
          "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"./core/Ownable.sol\";\nimport \"./core/Safe.sol\";\nimport \"./core/Versionable.sol\";\nimport \"./TokenManager.sol\";\nimport \"./Exchange.sol\";\nimport \"./VersionManager.sol\";\n\ncontract SupplierManager is Ownable, Versionable, Safe {\n  event Setup();\n\n  event SupplierSafeCreated(address supplier, address safe);\n  event SupplierInfoDIDUpdated(address supplier, string infoDID);\n\n  struct Supplier {\n    bool registered;\n    address safe;\n    string infoDID;\n  }\n\n  mapping(address => Supplier) public suppliers;\n  mapping(address => address) public safes; // supplier safe address <> supplier EOA address\n  address public bridgeUtils;\n  address public versionManager;\n\n  modifier onlySupplierSafe() {\n    require(safes[msg.sender] != address(0), \"caller is not a supplier safe\");\n    _;\n  }\n\n  function setup(\n    address _bridgeUtils,\n    address _gsMasterCopy,\n    address _gsProxyFactory,\n    address _versionManager\n  ) external onlyOwner returns (bool) {\n    require(_bridgeUtils != address(0), \"bridgeUtils not set\");\n    require(_gsMasterCopy != address(0), \"gsMasterCopy not set\");\n    require(_gsProxyFactory != address(0), \"gsProxyFactory not set\");\n    require(_versionManager != address(0), \"versionManager not set\");\n\n    bridgeUtils = _bridgeUtils;\n    versionManager = _versionManager;\n    Safe.setup(_gsMasterCopy, _gsProxyFactory);\n    emit Setup();\n\n    return true;\n  }\n\n  function setSupplierInfoDID(string calldata infoDID)\n    external\n    onlySupplierSafe\n    returns (bool)\n  {\n    address safeAddr = msg.sender;\n    address supplier = safes[safeAddr];\n    require(supplier != address(0), \"Supplier is invalid\");\n    require(suppliers[supplier].registered, \"Do not have supplier for safe\");\n\n    suppliers[supplier].infoDID = infoDID;\n    emit SupplierInfoDIDUpdated(supplier, infoDID);\n    return true;\n  }\n\n  function registerSupplier(address supplier) external returns (address) {\n    require(supplier != address(0), \"invalid supplier\");\n    require(\n      msg.sender == bridgeUtils || (owner() == _msgSender()),\n      \"caller is not BridgeUtils nor owner\"\n    );\n    require(!isRegistered(supplier), \"supplier already registered\");\n    return _registerSupplier(supplier);\n  }\n\n  function isRegistered(address supplier) public view returns (bool) {\n    return suppliers[supplier].registered;\n  }\n\n  function safeForSupplier(address supplier) external view returns (address) {\n    if (!isRegistered(supplier)) {\n      return address(0);\n    }\n    return suppliers[supplier].safe;\n  }\n\n  function _registerSupplier(address supplier) internal returns (address) {\n    address safe = createSafe(supplier);\n    suppliers[supplier].registered = true;\n    suppliers[supplier].safe = safe;\n    safes[safe] = supplier;\n\n    emit SupplierSafeCreated(supplier, safe);\n    return safe;\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n"
        },
        {
          "Filename": "@gnosis.pm/safe-contracts/contracts/GnosisSafe.sol",
          "SourceCode": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"./base/ModuleManager.sol\";\nimport \"./base/OwnerManager.sol\";\nimport \"./base/FallbackManager.sol\";\nimport \"./base/GuardManager.sol\";\nimport \"./common/EtherPaymentFallback.sol\";\nimport \"./common/Singleton.sol\";\nimport \"./common/SignatureDecoder.sol\";\nimport \"./common/SecuredTokenTransfer.sol\";\nimport \"./common/StorageAccessible.sol\";\nimport \"./interfaces/ISignatureValidator.sol\";\nimport \"./external/GnosisSafeMath.sol\";\n\n/// @title Gnosis Safe - A multisignature wallet with support for confirmations using signed messages based on ERC191.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafe is\n    EtherPaymentFallback,\n    Singleton,\n    ModuleManager,\n    OwnerManager,\n    SignatureDecoder,\n    SecuredTokenTransfer,\n    ISignatureValidatorConstants,\n    FallbackManager,\n    StorageAccessible,\n    GuardManager\n{\n    using GnosisSafeMath for uint256;\n\n    string public constant VERSION = \"1.3.0\";\n\n    // keccak256(\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\n    // );\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\n\n    // keccak256(\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\n    // );\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\n\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\n    event SignMsg(bytes32 indexed msgHash);\n    event ExecutionFailure(bytes32 txHash, uint256 payment);\n    event ExecutionSuccess(bytes32 txHash, uint256 payment);\n\n    uint256 public nonce;\n    bytes32 private _deprecatedDomainSeparator;\n    // Mapping to keep track of all message hashes that have been approve by ALL REQUIRED owners\n    mapping(bytes32 => uint256) public signedMessages;\n    // Mapping to keep track of all hashes (message or transaction) that have been approve by ANY owners\n    mapping(address => mapping(bytes32 => uint256)) public approvedHashes;\n\n    // This constructor ensures that this contract can only be used as a master copy for Proxy contracts\n    constructor() {\n        // By setting the threshold it is not possible to call setup anymore,\n        // so we create a Safe with 0 owners and threshold 1.\n        // This is an unusable Safe, perfect for the singleton\n        threshold = 1;\n    }\n\n    /// @dev Setup function sets initial storage of contract.\n    /// @param _owners List of Safe owners.\n    /// @param _threshold Number of required confirmations for a Safe transaction.\n    /// @param to Contract address for optional delegate call.\n    /// @param data Data payload for optional delegate call.\n    /// @param fallbackHandler Handler for fallback calls to this contract\n    /// @param paymentToken Token that should be used for the payment (0 is ETH)\n    /// @param payment Value that should be paid\n    /// @param paymentReceiver Adddress that should receive the payment (or 0 if tx.origin)\n    function setup(\n        address[] calldata _owners,\n        uint256 _threshold,\n        address to,\n        bytes calldata data,\n        address fallbackHandler,\n        address paymentToken,\n        uint256 payment,\n        address payable paymentReceiver\n    ) external {\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\n        setupOwners(_owners, _threshold);\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\n        setupModules(to, data);\n\n        if (payment > 0) {\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\n        }\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\n    }\n\n    /// @dev Allows to execute a Safe transaction confirmed by required number of owners and then pays the account that submitted the transaction.\n    ///      Note: The fees are always transferred, even if the user transaction fails.\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @param safeTxGas Gas that should be used for the Safe transaction.\n    /// @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Gas price that should be used for the payment calculation.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param signatures Packed signature data ({bytes32 r}{bytes32 s}{uint8 v})\n    function execTransaction(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver,\n        bytes memory signatures\n    ) public payable virtual returns (bool success) {\n        bytes32 txHash;\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            bytes memory txHashData =\n                encodeTransactionData(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    nonce\n                );\n            // Increase nonce and execute transaction.\n            nonce++;\n            txHash = keccak256(txHashData);\n            checkSignatures(txHash, txHashData, signatures);\n        }\n        address guard = getGuard();\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkTransaction(\n                    // Transaction info\n                    to,\n                    value,\n                    data,\n                    operation,\n                    safeTxGas,\n                    // Payment info\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    // Signature info\n                    signatures,\n                    msg.sender\n                );\n            }\n        }\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\n        require(gasleft() >= ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500, \"GS010\");\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\n        {\n            uint256 gasUsed = gasleft();\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\n            // We only substract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\n            gasUsed = gasUsed.sub(gasleft());\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\n            require(success || safeTxGas != 0 || gasPrice != 0, \"GS013\");\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\n            uint256 payment = 0;\n            if (gasPrice > 0) {\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\n            }\n            if (success) emit ExecutionSuccess(txHash, payment);\n            else emit ExecutionFailure(txHash, payment);\n        }\n        {\n            if (guard != address(0)) {\n                Guard(guard).checkAfterExecution(txHash, success);\n            }\n        }\n    }\n\n    function handlePayment(\n        uint256 gasUsed,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address payable refundReceiver\n    ) private returns (uint256 payment) {\n        // solhint-disable-next-line avoid-tx-origin\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\n        if (gasToken == address(0)) {\n            // For ETH we will only adjust the gas price to not be higher than the actual used gas price\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\n            require(receiver.send(payment), \"GS011\");\n        } else {\n            payment = gasUsed.add(baseGas).mul(gasPrice);\n            require(transferToken(gasToken, receiver, payment), \"GS012\");\n        }\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     */\n    function checkSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures\n    ) public view {\n        // Load threshold to avoid multiple storage loads\n        uint256 _threshold = threshold;\n        // Check that a threshold is set\n        require(_threshold > 0, \"GS001\");\n        checkNSignatures(dataHash, data, signatures, _threshold);\n    }\n\n    /**\n     * @dev Checks whether the signature provided is valid for the provided data, hash. Will revert otherwise.\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\n     * @param data That should be signed (this is passed to an external validator contract)\n     * @param signatures Signature data that should be verified. Can be ECDSA signature, contract signature (EIP-1271) or approved hash.\n     * @param requiredSignatures Amount of required valid signatures.\n     */\n    function checkNSignatures(\n        bytes32 dataHash,\n        bytes memory data,\n        bytes memory signatures,\n        uint256 requiredSignatures\n    ) public view {\n        // Check that the provided signature data is not too short\n        require(signatures.length >= requiredSignatures.mul(65), \"GS020\");\n        // There cannot be an owner with address 0.\n        address lastOwner = address(0);\n        address currentOwner;\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        uint256 i;\n        for (i = 0; i < requiredSignatures; i++) {\n            (v, r, s) = signatureSplit(signatures, i);\n            if (v == 0) {\n                // If v is 0 then it is a contract signature\n                // When handling contract signatures the address of the contract is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\n                // Here we only check that the pointer is not pointing inside the part that is being processed\n                require(uint256(s) >= requiredSignatures.mul(65), \"GS021\");\n\n                // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\n                require(uint256(s).add(32) <= signatures.length, \"GS022\");\n\n                // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\n                uint256 contractSignatureLen;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    contractSignatureLen := mload(add(add(signatures, s), 0x20))\n                }\n                require(uint256(s).add(32).add(contractSignatureLen) <= signatures.length, \"GS023\");\n\n                // Check signature\n                bytes memory contractSignature;\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\n                    contractSignature := add(add(signatures, s), 0x20)\n                }\n                require(ISignatureValidator(currentOwner).isValidSignature(data, contractSignature) == EIP1271_MAGIC_VALUE, \"GS024\");\n            } else if (v == 1) {\n                // If v is 1 then it is an approved hash\n                // When handling approved hashes the address of the approver is encoded into r\n                currentOwner = address(uint160(uint256(r)));\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\n                require(msg.sender == currentOwner || approvedHashes[currentOwner][dataHash] != 0, \"GS025\");\n            } else if (v > 30) {\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), v - 4, r, s);\n            } else {\n                // Default is the ecrecover flow with the provided data hash\n                // Use ecrecover with the messageHash for EOA signatures\n                currentOwner = ecrecover(dataHash, v, r, s);\n            }\n            require(currentOwner > lastOwner && owners[currentOwner] != address(0) && currentOwner != SENTINEL_OWNERS, \"GS026\");\n            lastOwner = currentOwner;\n        }\n    }\n\n    /// @dev Allows to estimate a Safe transaction.\n    ///      This method is only meant for estimation purpose, therefore the call will always revert and encode the result in the revert data.\n    ///      Since the `estimateGas` function includes refunds, call this method to get an estimated of the costs that are deducted from the safe with `execTransaction`\n    /// @param to Destination address of Safe transaction.\n    /// @param value Ether value of Safe transaction.\n    /// @param data Data payload of Safe transaction.\n    /// @param operation Operation type of Safe transaction.\n    /// @return Estimate without refunds and overhead fees (base transaction and payload data gas costs).\n    /// @notice Deprecated in favor of common/StorageAccessible.sol and will be removed in next version.\n    function requiredTxGas(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation\n    ) external returns (uint256) {\n        uint256 startGas = gasleft();\n        // We don't provide an error message here, as we use it to return the estimate\n        require(execute(to, value, data, operation, gasleft()));\n        uint256 requiredGas = startGas - gasleft();\n        // Convert response to string and return via error message\n        revert(string(abi.encodePacked(requiredGas)));\n    }\n\n    /**\n     * @dev Marks a hash as approved. This can be used to validate a hash that is used by a signature.\n     * @param hashToApprove The hash that should be marked as approved for signatures that are verified by this contract.\n     */\n    function approveHash(bytes32 hashToApprove) external {\n        require(owners[msg.sender] != address(0), \"GS030\");\n        approvedHashes[msg.sender][hashToApprove] = 1;\n        emit ApproveHash(hashToApprove, msg.sender);\n    }\n\n    /// @dev Returns the chain id used by this contract.\n    function getChainId() public view returns (uint256) {\n        uint256 id;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n        return id;\n    }\n\n    function domainSeparator() public view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, getChainId(), this));\n    }\n\n    /// @dev Returns the bytes that are hashed to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Gas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash bytes.\n    function encodeTransactionData(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes memory) {\n        bytes32 safeTxHash =\n            keccak256(\n                abi.encode(\n                    SAFE_TX_TYPEHASH,\n                    to,\n                    value,\n                    keccak256(data),\n                    operation,\n                    safeTxGas,\n                    baseGas,\n                    gasPrice,\n                    gasToken,\n                    refundReceiver,\n                    _nonce\n                )\n            );\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\n    }\n\n    /// @dev Returns hash to be signed by owners.\n    /// @param to Destination address.\n    /// @param value Ether value.\n    /// @param data Data payload.\n    /// @param operation Operation type.\n    /// @param safeTxGas Fas that should be used for the safe transaction.\n    /// @param baseGas Gas costs for data used to trigger the safe transaction.\n    /// @param gasPrice Maximum gas price that should be used for this transaction.\n    /// @param gasToken Token address (or 0 if ETH) that is used for the payment.\n    /// @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\n    /// @param _nonce Transaction nonce.\n    /// @return Transaction hash.\n    function getTransactionHash(\n        address to,\n        uint256 value,\n        bytes calldata data,\n        Enum.Operation operation,\n        uint256 safeTxGas,\n        uint256 baseGas,\n        uint256 gasPrice,\n        address gasToken,\n        address refundReceiver,\n        uint256 _nonce\n    ) public view returns (bytes32) {\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\n    }\n}\n"
        }
      ],
      "CompilerVersion": "v0.8.9+commit.e5eed63a",
      "ContractName": "AddRewardRuleHandler",
      "EVMVersion": "default",
      "FileName": "contracts/action-handlers/AddRewardRuleHandler.sol",
      "IsProxy": "false",
      "OptimizationUsed": "false",
      "SourceCode": "pragma solidity ^0.8.9;\npragma abicoder v1;\n\nimport \"../core/Ownable.sol\";\nimport \"../core/Versionable.sol\";\nimport \"../PrepaidCardManager.sol\";\nimport \"../Exchange.sol\";\nimport \"../RewardManager.sol\";\nimport \"../VersionManager.sol\";\n\ncontract AddRewardRuleHandler is Ownable, Versionable {\n  event Setup();\n  event RewardRuleAdded(\n    address prepaidCard,\n    address rewardProgramID,\n    bytes blob\n  );\n\n  address public actionDispatcher;\n  address public prepaidCardManager;\n  address public exchangeAddress;\n  address public tokenManagerAddress;\n  address public rewardManagerAddress;\n  address public versionManager;\n\n  function setup(\n    address _actionDispatcher,\n    address _prepaidCardManager,\n    address _exchangeAddress,\n    address _tokenManagerAddress,\n    address _rewardManagerAddress,\n    address _versionManager\n  ) external onlyOwner returns (bool) {\n    require(_actionDispatcher != address(0), \"actionDispatcher not set\");\n    require(_prepaidCardManager != address(0), \"prepaidCardManager not set\");\n    require(_exchangeAddress != address(0), \"exchangeAddress not set\");\n    require(_tokenManagerAddress != address(0), \"tokenManagerAddress not set\");\n    require(\n      _rewardManagerAddress != address(0),\n      \"rewardManagerAddress not set\"\n    );\n    require(_versionManager != address(0), \"versionManager not set\");\n\n    actionDispatcher = _actionDispatcher;\n    prepaidCardManager = _prepaidCardManager;\n    exchangeAddress = _exchangeAddress;\n    tokenManagerAddress = _tokenManagerAddress;\n    rewardManagerAddress = _rewardManagerAddress;\n    versionManager = _versionManager;\n    emit Setup();\n    return true;\n  }\n\n  /**\n   * @dev onTokenTransfer(ERC677) - this is the ERC677 token transfer callback.\n   *\n   * This adds the reward rule to the reward manager.\n   *\n   * See AddRewardRuleHandler in README for more information.\n   *\n   * @param from the token sender (should be the action dispatcher)\n   * @param data encoded as: (\n   *  address prepaidCard,\n   *  uint256 ???,\n   *  bytes actionData, encoded as: (\n   *    address rewardProgramID,\n   *    bytes blob (hex encoding of rule blob)\n   *    )\n   *  )\n   */\n  function onTokenTransfer(\n    address payable from,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool) {\n    require(\n      TokenManager(tokenManagerAddress).isValidToken(msg.sender),\n      \"calling token is unaccepted\"\n    );\n    require(\n      from == actionDispatcher,\n      \"can only accept tokens from action dispatcher\"\n    );\n    require(amount == 0, \"amount must be 0\");\n\n    (address payable prepaidCard, , bytes memory actionData) = abi.decode(\n      data,\n      (address, uint256, bytes)\n    );\n\n    (address rewardProgramID, bytes memory blob) = abi.decode(\n      actionData,\n      (address, bytes)\n    );\n\n    require(\n      RewardManager(rewardManagerAddress).isRewardProgram(rewardProgramID),\n      \"reward program does not exist\"\n    );\n\n    PrepaidCardManager prepaidCardMgr = PrepaidCardManager(\n      prepaidCardManager\n    );\n    address prepaidCardOwner = prepaidCardMgr.getPrepaidCardOwner(prepaidCard);\n\n    require(\n      RewardManager(rewardManagerAddress).rewardProgramAdmins(\n        rewardProgramID\n      ) == prepaidCardOwner,\n      \"can only be called by reward program admin\"\n    );\n\n    RewardManager(rewardManagerAddress).addRewardRule(rewardProgramID, blob);\n    prepaidCardMgr.setPrepaidCardUsed(prepaidCard);\n    emit RewardRuleAdded(prepaidCard, rewardProgramID, blob);\n    return true;\n  }\n\n  function cardpayVersion() external view returns (string memory) {\n    return VersionManager(versionManager).version();\n  }\n}\n",
      "Address": "0xfe2bf0dba2189a4d68cb5481a542787c73eb387c"
    }
  ],
  "status": "1"
}